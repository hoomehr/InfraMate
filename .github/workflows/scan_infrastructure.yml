# Scan Infrastructure Workflow - Simple Version
name: Infra Cost Optimization 

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to scan'
        required: true
        default: '.'
      target_branch:
        description: 'Branch to scan'
        required: true
        default: 'main'

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Inframate
        uses: actions/checkout@v4
        with:
          path: inframate
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo }}
          ref: ${{ github.event.inputs.target_branch }}
          path: target_repo
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv google-generativeai tabulate
      
      - name: Find Terraform files
        id: find_tf
        run: |
          cd target_repo
          echo "Scanning for Terraform files..."
          TF_FILES=$(find . -name "*.tf" | sort)
          
          if [ -z "$TF_FILES" ]; then
            echo "No Terraform files found in the repository."
            echo "tf_found=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Found Terraform files:"
            echo "$TF_FILES"
            echo "tf_found=true" >> $GITHUB_OUTPUT
            
            # Create resource extraction script
            mkdir -p /tmp/scripts
            
            echo '
            import os
            import re
            import sys
            
            def extract_resources(terraform_file):
                resources = []
                with open(terraform_file, "r") as f:
                    content = f.read()
                
                pattern = r"resource\s+\"([^\"]+)\"\s+\"([^\"]+)\""
                matches = re.finditer(pattern, content)
                
                for match in matches:
                    resource_type = match.group(1)
                    resource_name = match.group(2)
                    resources.append(f"{resource_type}.{resource_name}")
                
                return resources
            
            if __name__ == "__main__":
                if len(sys.argv) < 2:
                    print("Usage: python script.py <terraform_file>")
                    sys.exit(1)
                
                terraform_file = sys.argv[1]
                resources = extract_resources(terraform_file)
                
                for resource in resources:
                    print(f"- {resource}")
            ' > /tmp/scripts/extract_tf.py
            
            # Create report
            echo "# Terraform Resources Found" > /tmp/resources.txt
            echo "" >> /tmp/resources.txt
            
            for file in $TF_FILES; do
              echo "## File: $file" >> /tmp/resources.txt
              python /tmp/scripts/extract_tf.py "$file" >> /tmp/resources.txt 2>/dev/null || echo "- Failed to extract resources" >> /tmp/resources.txt
              echo "" >> /tmp/resources.txt
            done
            
            cp /tmp/resources.txt ./resources.txt
          fi
      
      - name: Generate analysis
        if: steps.find_tf.outputs.tf_found == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          cd inframate
          
          # Create simple analysis script
          mkdir -p scripts
          
          echo '
          import os
          import sys
          import google.generativeai as genai
          from dotenv import load_dotenv
          
          # Load environment variables from .env file
          load_dotenv()
          
          # Set up Gemini API
          api_key = os.getenv("GEMINI_API_KEY") or os.getenv("GOOGLE_API_KEY")
          if not api_key:
              print("Error: GEMINI_API_KEY or GOOGLE_API_KEY environment variable not set")
              sys.exit(1)
          
          genai.configure(api_key=api_key)
          model = genai.GenerativeModel("gemini-2.5-pro-exp-03-25")
          
          def analyze_terraform(resources_file):
              with open(resources_file, "r") as f:
                  resources = f.read()
              
              prompt = """
              Based on the following Terraform resources, provide infrastructure recommendations:
              
              {}
              
              Please include:
              1. Cost optimization suggestions
              2. Security best practices
              3. Performance improvements 
              4. Infrastructure as Code best practices
              5. Scalability considerations
              
              Format as markdown with clear headings and actionable recommendations.
              """.format(resources)
              
              try:
                  response = model.generate_content(prompt)
                  return response.text
              except Exception as e:
                  return f"Error generating analysis: {e}"
          
          if __name__ == "__main__":
              resources_file = "../target_repo/resources.txt"
              analysis = analyze_terraform(resources_file)
              
              with open("IMPROVEMENTS.md", "w") as f:
                  f.write("# Infrastructure Improvement Recommendations\n\n")
                  f.write(analysis)
              
              print("Analysis complete.")
          ' > scripts/analyze.py
          
          # Run analysis if API key is available
          if [ -n "$GEMINI_API_KEY" ] || [ -n "$GOOGLE_API_KEY" ]; then
            python scripts/analyze.py
          else
            # Fallback to static analysis if no API key
            echo "# Infrastructure Improvement Recommendations" > IMPROVEMENTS.md
            echo "" >> IMPROVEMENTS.md
            echo "## Cost Optimization" >> IMPROVEMENTS.md
            echo "- Consider using reserved instances for long-running workloads" >> IMPROVEMENTS.md
            echo "- Use auto-scaling for variable workloads" >> IMPROVEMENTS.md
            echo "" >> IMPROVEMENTS.md
            echo "## Security Best Practices" >> IMPROVEMENTS.md
            echo "- Enable encryption for all data at rest" >> IMPROVEMENTS.md
            echo "- Implement least privilege access" >> IMPROVEMENTS.md
            echo "" >> IMPROVEMENTS.md
            echo "## Best Practices" >> IMPROVEMENTS.md
            echo "- Use modules for reusable components" >> IMPROVEMENTS.md
            echo "- Implement consistent tagging strategy" >> IMPROVEMENTS.md
          fi
          
          # Copy to target repository
          mkdir -p ../target_repo/terraform
          cp IMPROVEMENTS.md ../target_repo/terraform/
          
          echo "analysis_complete=true" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        if: steps.find_tf.outputs.tf_found == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.REPO_PAT }}
          path: target_repo
          commit-message: "Add infrastructure improvement recommendations"
          title: "Infrastructure Optimization Recommendations"
          body: |
            # Infrastructure Analysis
            
            This PR contains recommendations for improving your infrastructure based on Terraform analysis.
            
            The analysis includes:
            - Cost optimization opportunities
            - Security best practices
            - Performance improvements
            - Infrastructure as Code best practices
            - Scalability considerations
            
            Review the terraform/IMPROVEMENTS.md file for detailed recommendations.
          branch: inframate-improvements
          base: ${{ github.event.inputs.target_branch }}
      
      - name: Upload results
        if: steps.find_tf.outputs.tf_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-recommendations
          path: inframate/IMPROVEMENTS.md 