name: Agentic Infrastructure Management

on:
  push:
    paths:
      - 'inframate.md'
      - '.github/workflows/agentic_infra_management.yml'
  pull_request:
    paths:
      - 'inframate.md'
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to analyze'
        required: true
        default: '.'
      target_branch:
        description: 'Branch to analyze'
        required: true
        default: 'main'
      action:
        description: 'Action to perform (analyze, optimize, secure, visualize, auto)'
        required: true
        default: 'analyze'
      autonomous_mode:
        description: 'Run in fully autonomous mode'
        required: true
        default: 'false'
        type: boolean
      error_mode:
        description: 'Error handling mode (auto, verbose, silent)'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - verbose
          - silent

jobs:
  agentic-infra-management:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Checkout target repository
        if: ${{ github.event.inputs.target_repo != '.' }}
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.target_repo }}
          ref: ${{ github.event.inputs.target_branch }}
          path: target_repo
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install google-generativeai

      - name: Set up error capture
        id: setup_error_capture
        run: |
          mkdir -p artifacts
          echo "ARTIFACTS_DIR=$(pwd)/artifacts" >> $GITHUB_ENV
          
          # Create an error tracking file
          echo "[]" > artifacts/errors.json
          
          # Timestamp for the run
          echo "RUN_TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
      
      - name: Run agentic workflow with error handling
        id: run_workflow
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Determine the target repository path
          if [ "${{ github.event.inputs.target_repo }}" == "." ]; then
            TARGET_REPO_PATH="$(pwd)"
          else
            TARGET_REPO_PATH="$(pwd)/target_repo"
          fi
          
          # Determine the action
          ACTION="${{ github.event.inputs.action || 'analyze' }}"
          
          # Determine if autonomous mode
          if [ "${{ github.event.inputs.autonomous_mode }}" == "true" ]; then
            AUTONOMOUS_FLAG="--autonomous"
          else
            AUTONOMOUS_FLAG=""
          fi
          
          # Determine error mode
          ERROR_MODE="${{ github.event.inputs.error_mode || 'auto' }}"
          
          # Set output file
          OUTPUT_FILE="${ARTIFACTS_DIR}/results_${RUN_TIMESTAMP}.json"
          
          # Run the workflow with error handling
          COMMAND="./scripts/run_agentic_workflow.sh --repo-path \"${TARGET_REPO_PATH}\" --action ${ACTION} ${AUTONOMOUS_FLAG} --output \"${OUTPUT_FILE}\" --error-mode ${ERROR_MODE}"
          echo "Running command: ${COMMAND}"
          
          # Execute and capture output
          ${COMMAND} 2>&1 | tee ${ARTIFACTS_DIR}/workflow_output.log
          
          # Capture the exit code
          EXIT_CODE=${PIPESTATUS[0]}
          echo "workflow_exit_code=${EXIT_CODE}" >> $GITHUB_OUTPUT
          
          # Check if the output file was created
          if [ -f "${OUTPUT_FILE}" ]; then
            echo "output_file=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
            
            # Check for errors in the output
            if grep -q "\"success\": false" "${OUTPUT_FILE}"; then
              echo "has_errors=true" >> $GITHUB_OUTPUT
              
              # Extract error details for creating an issue
              ERROR_TYPE=$(jq -r '.error.type // "unknown"' "${OUTPUT_FILE}")
              ERROR_MSG=$(jq -r '.error.message // "Unknown error"' "${OUTPUT_FILE}")
              
              echo "error_type=${ERROR_TYPE}" >> $GITHUB_OUTPUT
              echo "error_message=${ERROR_MSG}" >> $GITHUB_OUTPUT
            else
              echo "has_errors=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_errors=true" >> $GITHUB_OUTPUT
            echo "error_type=execution_failure" >> $GITHUB_OUTPUT
            echo "error_message=Workflow failed to produce output file" >> $GITHUB_OUTPUT
          fi
          
          exit ${EXIT_CODE}
        continue-on-error: true
      
      - name: Generate error report
        if: steps.run_workflow.outputs.has_errors == 'true'
        run: |
          echo "## Inframate Workflow Error" > ${ARTIFACTS_DIR}/error_report.md
          echo "" >> ${ARTIFACTS_DIR}/error_report.md
          echo "### Error Details" >> ${ARTIFACTS_DIR}/error_report.md
          echo "- **Type:** ${{ steps.run_workflow.outputs.error_type }}" >> ${ARTIFACTS_DIR}/error_report.md
          echo "- **Message:** ${{ steps.run_workflow.outputs.error_message }}" >> ${ARTIFACTS_DIR}/error_report.md
          echo "" >> ${ARTIFACTS_DIR}/error_report.md
          
          # Extract AI solution if available
          if [ -f "${{ steps.run_workflow.outputs.output_file }}" ]; then
            echo "### AI Solution" >> ${ARTIFACTS_DIR}/error_report.md
            echo "" >> ${ARTIFACTS_DIR}/error_report.md
            
            # Extract root cause
            ROOT_CAUSE=$(jq -r '.error.ai_solution.root_cause // "Unknown"' "${{ steps.run_workflow.outputs.output_file }}")
            echo "#### Root Cause" >> ${ARTIFACTS_DIR}/error_report.md
            echo "${ROOT_CAUSE}" >> ${ARTIFACTS_DIR}/error_report.md
            echo "" >> ${ARTIFACTS_DIR}/error_report.md
            
            # Extract solution
            SOLUTION=$(jq -r '.error.ai_solution.solution // "No solution available"' "${{ steps.run_workflow.outputs.output_file }}")
            echo "#### Solution" >> ${ARTIFACTS_DIR}/error_report.md
            echo "${SOLUTION}" >> ${ARTIFACTS_DIR}/error_report.md
            echo "" >> ${ARTIFACTS_DIR}/error_report.md
            
            # Extract prevention
            PREVENTION=$(jq -r '.error.ai_solution.prevention // "No prevention tips available"' "${{ steps.run_workflow.outputs.output_file }}")
            echo "#### Prevention" >> ${ARTIFACTS_DIR}/error_report.md
            echo "${PREVENTION}" >> ${ARTIFACTS_DIR}/error_report.md
          else
            echo "No AI solution available." >> ${ARTIFACTS_DIR}/error_report.md
          fi
          
          # Add error recovery history if available
          if [ -f "${{ steps.run_workflow.outputs.output_file }}" ]; then
            RECOVERY_ATTEMPTS=$(jq -r '.error.recovery_attempts | length // 0' "${{ steps.run_workflow.outputs.output_file }}")
            
            if [ "${RECOVERY_ATTEMPTS}" != "0" ] && [ "${RECOVERY_ATTEMPTS}" != "null" ]; then
              echo "### Recovery Attempts" >> ${ARTIFACTS_DIR}/error_report.md
              echo "" >> ${ARTIFACTS_DIR}/error_report.md
              echo "The system made ${RECOVERY_ATTEMPTS} recovery attempts:" >> ${ARTIFACTS_DIR}/error_report.md
              echo "" >> ${ARTIFACTS_DIR}/error_report.md
              
              jq -r '.error.recovery_attempts[] | "- **Attempt:** \(.timestamp)\n  - **Success:** \(.success)\n  - **Duration:** \(.duration) seconds\n"' "${{ steps.run_workflow.outputs.output_file }}" >> ${ARTIFACTS_DIR}/error_report.md
            fi
          fi
      
      - name: Create issue for unresolved errors
        if: steps.run_workflow.outputs.has_errors == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the error report
            const errorReport = fs.readFileSync('${{ env.ARTIFACTS_DIR }}/error_report.md', 'utf8');
            
            // Create an issue with the error report
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Inframate Error: ${{ steps.run_workflow.outputs.error_type }}`,
              body: errorReport,
              labels: ['error', 'inframate', 'automated']
            });
            
            console.log(`Created issue #${issue.data.number}`);
      
      - name: Generate visualization (on success)
        if: steps.run_workflow.outputs.has_errors != 'true' && (github.event.inputs.action == 'visualize' || github.event.inputs.action == 'auto')
        run: |
          python scripts/visualization/generate_report.py --input "${{ steps.run_workflow.outputs.output_file }}" --output "${ARTIFACTS_DIR}/inframate_report.html"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: inframate-artifacts-${{ env.RUN_TIMESTAMP }}
          path: ${{ env.ARTIFACTS_DIR }}
          
      - name: Report workflow status
        run: |
          if [ "${{ steps.run_workflow.outputs.has_errors }}" == "true" ]; then
            echo "::error::Inframate workflow failed with error: ${{ steps.run_workflow.outputs.error_message }}"
            echo "An issue has been created with error details and AI-powered solution."
          else
            echo "::notice::Inframate workflow completed successfully."
          fi
          
          # Exit with the original workflow exit code
          exit ${{ steps.run_workflow.outputs.workflow_exit_code }} 