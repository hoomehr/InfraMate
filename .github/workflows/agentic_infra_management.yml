name: Agentic InfraMate

on:
  push:
    paths:
      - 'inframate.md'
      - '.github/workflows/agentic_infra_management.yml'
  pull_request:
    paths:
      - 'inframate.md'
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to analyze and manage'
        required: true
        default: '.'
      target_branch:
        description: 'Branch to analyze'
        required: true
        default: 'main'

jobs:
  inframate-all-in-one:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Checkout target repository
        if: ${{ github.event.inputs.target_repo != '.' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo }}
          ref: ${{ github.event.inputs.target_branch }}
          path: target_repo
          token: ${{ secrets.REPO_PAT }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install google-generativeai
          pip install terraform-local

      - name: Set up environment
        id: setup
        run: |
          mkdir -p artifacts
          echo "ARTIFACTS_DIR=$(pwd)/artifacts" >> $GITHUB_ENV
          
          # Create an error tracking file
          echo "[]" > artifacts/errors.json
          
          # Timestamp for the run
          echo "RUN_TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          
          # Determine the target repository path
          if [ "${{ github.event.inputs.target_repo }}" == "." ]; then
            echo "TARGET_REPO_PATH=$(pwd)" >> $GITHUB_ENV
          else
            echo "TARGET_REPO_PATH=$(pwd)/target_repo" >> $GITHUB_ENV
          fi
      
      #--------------------------------------------------------------
      # PHASE 1: Infrastructure Analysis and Creation
      #--------------------------------------------------------------
      - name: 1️⃣ Analyze and Create Infrastructure
        id: create
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "## Phase 1: Infrastructure Analysis and Creation"
          echo "Starting repository analysis..."
          
          OUTPUT_FILE="${ARTIFACTS_DIR}/phase1_results_${RUN_TIMESTAMP}.json"
          
          ./scripts/run_agentic_workflow.sh \
            --repo-path "${TARGET_REPO_PATH}" \
            --action analyze \
            --autonomous \
            --output "${OUTPUT_FILE}" \
            --error-mode auto
          
          EXIT_CODE=$?
          echo "phase1_exit_code=${EXIT_CODE}" >> $GITHUB_OUTPUT
          echo "phase1_output=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "phase1_status=success" >> $GITHUB_OUTPUT
            echo "✅ Phase 1 completed successfully"
          else
            echo "phase1_status=failure" >> $GITHUB_OUTPUT
            echo "❌ Phase 1 failed with exit code: ${EXIT_CODE}"
            
            # Extract error information for error report
            ERROR_TYPE=$(jq -r '.error.type // "unknown"' "${OUTPUT_FILE}" 2>/dev/null || echo "unknown")
            ERROR_MSG=$(jq -r '.error.message // "Unknown error occurred during infrastructure analysis"' "${OUTPUT_FILE}" 2>/dev/null || echo "Unknown error occurred during infrastructure analysis")
            
            echo "phase1_error_type=${ERROR_TYPE}" >> $GITHUB_OUTPUT
            echo "phase1_error_message=${ERROR_MSG}" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      #--------------------------------------------------------------
      # PHASE 2: Infrastructure Optimization
      #--------------------------------------------------------------
      - name: 2️⃣ Optimize Infrastructure (Cost & Performance)
        id: optimize
        if: always() && (steps.create.outputs.phase1_status == 'success')
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "## Phase 2: Infrastructure Optimization"
          echo "Optimizing infrastructure for cost and performance..."
          
          OUTPUT_FILE="${ARTIFACTS_DIR}/phase2_results_${RUN_TIMESTAMP}.json"
          
          ./scripts/run_agentic_workflow.sh \
            --repo-path "${TARGET_REPO_PATH}" \
            --action optimize \
            --autonomous \
            --output "${OUTPUT_FILE}" \
            --error-mode auto
          
          EXIT_CODE=$?
          echo "phase2_exit_code=${EXIT_CODE}" >> $GITHUB_OUTPUT
          echo "phase2_output=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "phase2_status=success" >> $GITHUB_OUTPUT
            echo "✅ Phase 2 completed successfully"
          else
            echo "phase2_status=failure" >> $GITHUB_OUTPUT
            echo "❌ Phase 2 failed with exit code: ${EXIT_CODE}"
            
            # Extract error information for error report
            ERROR_TYPE=$(jq -r '.error.type // "unknown"' "${OUTPUT_FILE}" 2>/dev/null || echo "unknown")
            ERROR_MSG=$(jq -r '.error.message // "Unknown error occurred during infrastructure optimization"' "${OUTPUT_FILE}" 2>/dev/null || echo "Unknown error occurred during infrastructure optimization")
            
            echo "phase2_error_type=${ERROR_TYPE}" >> $GITHUB_OUTPUT
            echo "phase2_error_message=${ERROR_MSG}" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      #--------------------------------------------------------------
      # PHASE 3: Security Analysis
      #--------------------------------------------------------------
      - name: 3️⃣ Security Analysis and Hardening
        id: secure
        if: always() && (steps.create.outputs.phase1_status == 'success')
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "## Phase 3: Security Analysis and Hardening"
          echo "Analyzing infrastructure for security vulnerabilities..."
          
          OUTPUT_FILE="${ARTIFACTS_DIR}/phase3_results_${RUN_TIMESTAMP}.json"
          
          ./scripts/run_agentic_workflow.sh \
            --repo-path "${TARGET_REPO_PATH}" \
            --action secure \
            --autonomous \
            --output "${OUTPUT_FILE}" \
            --error-mode auto
          
          EXIT_CODE=$?
          echo "phase3_exit_code=${EXIT_CODE}" >> $GITHUB_OUTPUT
          echo "phase3_output=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "phase3_status=success" >> $GITHUB_OUTPUT
            echo "✅ Phase 3 completed successfully"
          else
            echo "phase3_status=failure" >> $GITHUB_OUTPUT
            echo "❌ Phase 3 failed with exit code: ${EXIT_CODE}"
            
            # Extract error information for error report
            ERROR_TYPE=$(jq -r '.error.type // "unknown"' "${OUTPUT_FILE}" 2>/dev/null || echo "unknown")
            ERROR_MSG=$(jq -r '.error.message // "Unknown error occurred during security analysis"' "${OUTPUT_FILE}" 2>/dev/null || echo "Unknown error occurred during security analysis")
            
            echo "phase3_error_type=${ERROR_TYPE}" >> $GITHUB_OUTPUT
            echo "phase3_error_message=${ERROR_MSG}" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      #--------------------------------------------------------------
      # PHASE 4: Infrastructure Visualization (OPTIONAL)
      #--------------------------------------------------------------
      - name: 4️⃣ Infrastructure Visualization (Optional)
        id: visualize
        if: always() && (steps.create.outputs.phase1_status == 'success')
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "## Phase 4: Infrastructure Visualization (Optional)"
          echo "Generating infrastructure visualizations..."
          
          OUTPUT_FILE="${ARTIFACTS_DIR}/phase4_results_${RUN_TIMESTAMP}.json"
          
          ./scripts/run_agentic_workflow.sh \
            --repo-path "${TARGET_REPO_PATH}" \
            --action visualize \
            --autonomous \
            --output "${OUTPUT_FILE}" \
            --error-mode auto
          
          EXIT_CODE=$?
          echo "phase4_exit_code=${EXIT_CODE}" >> $GITHUB_OUTPUT
          echo "phase4_output=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "phase4_status=success" >> $GITHUB_OUTPUT
            echo "✅ Phase 4 completed successfully"
          else
            echo "phase4_status=failure" >> $GITHUB_OUTPUT
            echo "⚠️ Phase 4 failed with exit code: ${EXIT_CODE} (this is an optional step and won't affect the overall workflow)"
            
            # Extract error information for error report
            ERROR_TYPE=$(jq -r '.error.type // "unknown"' "${OUTPUT_FILE}" 2>/dev/null || echo "unknown")
            ERROR_MSG=$(jq -r '.error.message // "Visualization failed, but this is optional and the workflow will continue"' "${OUTPUT_FILE}" 2>/dev/null || echo "Visualization failed, but this is optional and the workflow will continue")
            
            echo "phase4_error_type=${ERROR_TYPE}" >> $GITHUB_OUTPUT
            echo "phase4_error_message=${ERROR_MSG}" >> $GITHUB_OUTPUT
            
            # Create error record for the error handler to process
            echo "{\"phase\": \"visualization\", \"error_type\": \"${ERROR_TYPE}\", \"error_message\": \"${ERROR_MSG}\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"optional\": true}" > ${ARTIFACTS_DIR}/phase4_error.json
          fi
        continue-on-error: true
      
      #--------------------------------------------------------------
      # Error Handling and Report Generation
      #--------------------------------------------------------------
      - name: Generate Comprehensive Report
        id: report
        if: always()
        run: |
          echo "# Inframate All-in-One Infrastructure Management Report" > ${ARTIFACTS_DIR}/full_report.md
          echo "Generated at $(date)" >> ${ARTIFACTS_DIR}/full_report.md
          echo "" >> ${ARTIFACTS_DIR}/full_report.md
          
          # Collect all errors for error handler
          echo "[" > ${ARTIFACTS_DIR}/all_errors.json
          
          # Add phase errors if they exist
          ERRORS_FOUND=false
          
          if [ "${{ steps.create.outputs.phase1_status }}" == "failure" ]; then
            ERRORS_FOUND=true
            echo "{\"phase\": \"creation\", \"error_type\": \"${{ steps.create.outputs.phase1_error_type }}\", \"error_message\": \"${{ steps.create.outputs.phase1_error_message }}\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"optional\": false}," >> ${ARTIFACTS_DIR}/all_errors.json
          fi
          
          if [ "${{ steps.optimize.outputs.phase2_status }}" == "failure" ]; then
            ERRORS_FOUND=true
            echo "{\"phase\": \"optimization\", \"error_type\": \"${{ steps.optimize.outputs.phase2_error_type }}\", \"error_message\": \"${{ steps.optimize.outputs.phase2_error_message }}\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"optional\": false}," >> ${ARTIFACTS_DIR}/all_errors.json
          fi
          
          if [ "${{ steps.secure.outputs.phase3_status }}" == "failure" ]; then
            ERRORS_FOUND=true
            echo "{\"phase\": \"security\", \"error_type\": \"${{ steps.secure.outputs.phase3_error_type }}\", \"error_message\": \"${{ steps.secure.outputs.phase3_error_message }}\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"optional\": false}," >> ${ARTIFACTS_DIR}/all_errors.json
          fi
          
          if [ "${{ steps.visualize.outputs.phase4_status }}" == "failure" ]; then
            ERRORS_FOUND=true
            echo "{\"phase\": \"visualization\", \"error_type\": \"${{ steps.visualize.outputs.phase4_error_type }}\", \"error_message\": \"${{ steps.visualize.outputs.phase4_error_message }}\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"optional\": true}," >> ${ARTIFACTS_DIR}/all_errors.json
          fi
          
          # Fix JSON array syntax (remove trailing comma if any errors found)
          if [ "$ERRORS_FOUND" == "true" ]; then
            # Remove trailing comma
            sed -i '$ s/,$//' ${ARTIFACTS_DIR}/all_errors.json
          fi
          
          # Close the JSON array
          echo "]" >> ${ARTIFACTS_DIR}/all_errors.json
          
          # Generate Phase 1 (Create) Report Section
          echo "## 1️⃣ Infrastructure Analysis and Creation" >> ${ARTIFACTS_DIR}/full_report.md
          if [ "${{ steps.create.outputs.phase1_status }}" == "success" ]; then
            echo "✅ **Status: Successful**" >> ${ARTIFACTS_DIR}/full_report.md
            
            # Extract infrastructure summary if available
            if [ -f "${{ steps.create.outputs.phase1_output }}" ]; then
              RESOURCES=$(jq -r '.infrastructure.resources | length // 0' "${{ steps.create.outputs.phase1_output }}" 2>/dev/null || echo "0")
              echo "" >> ${ARTIFACTS_DIR}/full_report.md
              echo "### Infrastructure Summary" >> ${ARTIFACTS_DIR}/full_report.md
              echo "- Detected Resources: ${RESOURCES}" >> ${ARTIFACTS_DIR}/full_report.md
              echo "" >> ${ARTIFACTS_DIR}/full_report.md
              
              # List resources if available
              jq -r '.infrastructure.resources[] | "- **" + .type + "**: " + .name' "${{ steps.create.outputs.phase1_output }}" 2>/dev/null >> ${ARTIFACTS_DIR}/full_report.md
            fi
          else
            echo "❌ **Status: Failed**" >> ${ARTIFACTS_DIR}/full_report.md
            echo "- Error Type: ${{ steps.create.outputs.phase1_error_type }}" >> ${ARTIFACTS_DIR}/full_report.md
            echo "- Error Message: ${{ steps.create.outputs.phase1_error_message }}" >> ${ARTIFACTS_DIR}/full_report.md
          fi
          echo "" >> ${ARTIFACTS_DIR}/full_report.md
          
          # Generate Phase 2 (Optimize) Report Section
          echo "## 2️⃣ Infrastructure Optimization" >> ${ARTIFACTS_DIR}/full_report.md
          if [ "${{ steps.optimize.outputs.phase2_status }}" == "success" ]; then
            echo "✅ **Status: Successful**" >> ${ARTIFACTS_DIR}/full_report.md
            
            # Extract optimization summary if available
            if [ -f "${{ steps.optimize.outputs.phase2_output }}" ]; then
              OPTIMIZATIONS=$(jq -r '.optimizations | length // 0' "${{ steps.optimize.outputs.phase2_output }}" 2>/dev/null || echo "0")
              COST_SAVINGS=$(jq -r '.cost_savings.percentage // "Unknown"' "${{ steps.optimize.outputs.phase2_output }}" 2>/dev/null || echo "Unknown")
              
              echo "" >> ${ARTIFACTS_DIR}/full_report.md
              echo "### Optimization Summary" >> ${ARTIFACTS_DIR}/full_report.md
              echo "- Optimizations Applied: ${OPTIMIZATIONS}" >> ${ARTIFACTS_DIR}/full_report.md
              echo "- Estimated Cost Savings: ${COST_SAVINGS}%" >> ${ARTIFACTS_DIR}/full_report.md
              echo "" >> ${ARTIFACTS_DIR}/full_report.md
              
              # List optimizations if available
              jq -r '.optimizations[] | "- **" + .type + "**: " + .description' "${{ steps.optimize.outputs.phase2_output }}" 2>/dev/null >> ${ARTIFACTS_DIR}/full_report.md
            fi
          else
            echo "❌ **Status: Failed**" >> ${ARTIFACTS_DIR}/full_report.md
            echo "- Error Type: ${{ steps.optimize.outputs.phase2_error_type }}" >> ${ARTIFACTS_DIR}/full_report.md
            echo "- Error Message: ${{ steps.optimize.outputs.phase2_error_message }}" >> ${ARTIFACTS_DIR}/full_report.md
          fi
          echo "" >> ${ARTIFACTS_DIR}/full_report.md
          
          # Generate Phase 3 (Security) Report Section
          echo "## 3️⃣ Security Analysis and Hardening" >> ${ARTIFACTS_DIR}/full_report.md
          if [ "${{ steps.secure.outputs.phase3_status }}" == "success" ]; then
            echo "✅ **Status: Successful**" >> ${ARTIFACTS_DIR}/full_report.md
            
            # Extract security summary if available
            if [ -f "${{ steps.secure.outputs.phase3_output }}" ]; then
              VULNERABILITIES=$(jq -r '.security.vulnerabilities | length // 0' "${{ steps.secure.outputs.phase3_output }}" 2>/dev/null || echo "0")
              FIXES=$(jq -r '.security.fixes | length // 0' "${{ steps.secure.outputs.phase3_output }}" 2>/dev/null || echo "0")
              
              echo "" >> ${ARTIFACTS_DIR}/full_report.md
              echo "### Security Summary" >> ${ARTIFACTS_DIR}/full_report.md
              echo "- Vulnerabilities Detected: ${VULNERABILITIES}" >> ${ARTIFACTS_DIR}/full_report.md
              echo "- Security Fixes Applied: ${FIXES}" >> ${ARTIFACTS_DIR}/full_report.md
              echo "" >> ${ARTIFACTS_DIR}/full_report.md
              
              # List vulnerabilities if available
              jq -r '.security.vulnerabilities[] | "- **" + .severity + "**: " + .description' "${{ steps.secure.outputs.phase3_output }}" 2>/dev/null >> ${ARTIFACTS_DIR}/full_report.md
            fi
          else
            echo "❌ **Status: Failed**" >> ${ARTIFACTS_DIR}/full_report.md
            echo "- Error Type: ${{ steps.secure.outputs.phase3_error_type }}" >> ${ARTIFACTS_DIR}/full_report.md
            echo "- Error Message: ${{ steps.secure.outputs.phase3_error_message }}" >> ${ARTIFACTS_DIR}/full_report.md
          fi
          echo "" >> ${ARTIFACTS_DIR}/full_report.md
          
          # Generate Phase 4 (Visualize) Report Section
          echo "## 4️⃣ Infrastructure Visualization (Optional)" >> ${ARTIFACTS_DIR}/full_report.md
          if [ "${{ steps.visualize.outputs.phase4_status }}" == "success" ]; then
            echo "✅ **Status: Successful**" >> ${ARTIFACTS_DIR}/full_report.md
            
            # Extract visualization summary if available
            if [ -f "${{ steps.visualize.outputs.phase4_output }}" ]; then
              VISUALIZATIONS=$(jq -r '.visualizations | length // 0' "${{ steps.visualize.outputs.phase4_output }}" 2>/dev/null || echo "0")
              
              echo "" >> ${ARTIFACTS_DIR}/full_report.md
              echo "### Visualization Summary" >> ${ARTIFACTS_DIR}/full_report.md
              echo "- Visualizations Generated: ${VISUALIZATIONS}" >> ${ARTIFACTS_DIR}/full_report.md
              echo "" >> ${ARTIFACTS_DIR}/full_report.md
              
              # Generate HTML report for visualizations
              if [ -f "${{ steps.visualize.outputs.phase4_output }}" ]; then
                python scripts/visualization/generate_report.py --input "${{ steps.visualize.outputs.phase4_output }}" --output "${ARTIFACTS_DIR}/inframate_visualization_report.html"
                echo "A detailed HTML visualization report has been generated." >> ${ARTIFACTS_DIR}/full_report.md
              fi
            fi
          else
            echo "⚠️ **Status: Not Generated** (Optional Step)" >> ${ARTIFACTS_DIR}/full_report.md
            echo "- Visualization is optional and was not successfully generated" >> ${ARTIFACTS_DIR}/full_report.md
            if [ -n "${{ steps.visualize.outputs.phase4_error_message }}" ]; then
              echo "- Note: ${{ steps.visualize.outputs.phase4_error_message }}" >> ${ARTIFACTS_DIR}/full_report.md
            fi
          fi
      
      - name: Create issue for errors
        if: always() && (steps.create.outputs.phase1_status == 'failure' || steps.optimize.outputs.phase2_status == 'failure' || steps.secure.outputs.phase3_status == 'failure')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const fs = require('fs');
            
            // Read the full report
            const fullReport = fs.readFileSync('${{ env.ARTIFACTS_DIR }}/full_report.md', 'utf8');
            
            // Determine which phases failed (not counting visualization as a failure)
            const failedPhases = [];
            if ('${{ steps.create.outputs.phase1_status }}' === 'failure') failedPhases.push('Infrastructure Creation');
            if ('${{ steps.optimize.outputs.phase2_status }}' === 'failure') failedPhases.push('Optimization');
            if ('${{ steps.secure.outputs.phase3_status }}' === 'failure') failedPhases.push('Security');
            
            // Only create issue if required steps failed
            if (failedPhases.length > 0) {
              // Create an issue with the report
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Inframate Error: Issues in ${failedPhases.join(', ')} phases`,
                body: fullReport,
                labels: ['error', 'inframate', 'automated']
              });
              
              console.log(`Created issue #${issue.data.number}`);
            } else {
              console.log('No issues created as all required phases succeeded');
            }
      
      - name: Trigger Error Recovery for ALL errors
        if: always() && (steps.create.outputs.phase1_status == 'failure' || steps.optimize.outputs.phase2_status == 'failure' || steps.secure.outputs.phase3_status == 'failure' || steps.visualize.outputs.phase4_status == 'failure')
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_PAT }}
          event-type: agentic-error
          client-payload: '{"workflow_id": "${{ github.run_id }}", "repo": "${{ github.repository }}", "run_number": "${{ github.run_number }}", "errors_file": "all_errors.json", "error_summary": "${{ steps.create.outputs.phase1_status == 'failure' && 'Creation' || '' }}${{ steps.optimize.outputs.phase2_status == 'failure' && ', Optimization' || '' }}${{ steps.secure.outputs.phase3_status == 'failure' && ', Security' || '' }}${{ steps.visualize.outputs.phase4_status == 'failure' && ', Visualization(optional)' || '' }}"}'
      
      - name: Create Pull Request with Results
        if: always() && (steps.create.outputs.phase1_status == 'success')
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.REPO_PAT }}
          path: ${{ env.TARGET_REPO_PATH }}
          commit-message: "Add Inframate infrastructure results"
          title: "🔧 Inframate Infrastructure Management Results"
          body: |
            # Inframate Infrastructure Management Results
            
            This PR contains the results of the automated infrastructure management workflow, including:
            
            - 📊 Infrastructure Analysis and Implementation
            - 💰 Cost and Performance Optimization
            - 🔒 Security Enhancements
            ${{ steps.visualize.outputs.phase4_status == 'success' && '- 🖼️ Infrastructure Visualizations' || '- ⚠️ Visualizations not generated (optional)' }}
            
            Please review the changes and merge if everything looks good.
          branch: "inframate/infra-management-${{ env.RUN_TIMESTAMP }}"
          base: ${{ github.event.inputs.target_branch || 'main' }}
      
      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: inframate-all-in-one-${{ env.RUN_TIMESTAMP }}
          path: ${{ env.ARTIFACTS_DIR }}
          
      - name: Report workflow status
        run: |
          echo "## Inframate All-in-One Workflow Summary"
          echo ""
          echo "1️⃣ Infrastructure Creation: ${{ steps.create.outputs.phase1_status || 'Not Run' }}"
          echo "2️⃣ Infrastructure Optimization: ${{ steps.optimize.outputs.phase2_status || 'Not Run' }}"
          echo "3️⃣ Security Analysis: ${{ steps.secure.outputs.phase3_status || 'Not Run' }}"
          echo "4️⃣ Infrastructure Visualization (Optional): ${{ steps.visualize.outputs.phase4_status || 'Not Run' }}"
          echo ""
          
          if [ "${{ steps.create.outputs.phase1_status }}" != "success" ]; then
            echo "::error::Infrastructure Creation failed. See artifacts for details."
            exit 1
          fi 