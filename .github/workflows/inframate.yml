name: Create Infrastructure

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to analyze'
        required: true
        default: '.'
      target_branch:
        description: 'Target branch to create PR against'
        required: true
        default: 'main'
      should_deploy:
        description: 'Deploy infrastructure after analysis'
        type: boolean
        required: false
        default: false

jobs:
  analyze:
    name: Generate Infrastructure
    runs-on: ubuntu-latest
    outputs:
      terraform_dir: ${{ steps.set_outputs.outputs.terraform_dir }}
      pr_number: ${{ steps.create_pr.outputs.pull-request-number }}
    steps:
      - name: Checkout Inframate
        uses: actions/checkout@v4
        with:
          path: inframate

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo }}
          token: ${{ secrets.REPO_PAT }}
          path: target_repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'inframate/setup.py'

      - name: Install Minimal Dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Create and activate a clean virtual environment
          cd inframate
          
          # Tell pip to not use a cache
          pip config set global.cache-dir false
          
          # Install core dependencies first
          pip install requests pathlib boto3 pyyaml python-dotenv google-generativeai gitpython click colorama numpy
          
          # Install langchain ecosystem without constraints
          pip install tiktoken
          pip install langchain>=0.3.0 langchain-community>=0.3.0 langchain-huggingface>=0.1.0
          
          # Install remaining dependencies
          pip install sentence-transformers>=2.6.0 faiss-cpu>=1.7.4
          
          # Now install our package without dependencies
          pip install -e . --no-dependencies
          
      - name: Analyze repository structure
        run: |
          cd target_repo
          echo "Analyzing repository structure..."
          ls -la
          
          # Check for common frameworks and languages
          if [ -f "package.json" ]; then
            echo "Found Node.js project"
            NODE_PROJECT=true
          fi
          
          if [ -f "requirements.txt" ]; then
            echo "Found Python project"
            PYTHON_PROJECT=true
          fi
          
          if [ -f "pom.xml" ]; then
            echo "Found Java project"
            JAVA_PROJECT=true
          fi
          
          if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
            echo "Found Docker configuration"
            DOCKER_PROJECT=true
          fi

      - name: Create sample inframate.md if needed
        run: |
          cd target_repo
          if [ ! -f "inframate.md" ]; then
            echo "Creating sample inframate.md file"
            cat > inframate.md << 'EOL'
          # Inframate Configuration

          ## Description
          This is an automated infrastructure analysis by Inframate.

          ## Language
          Detected automatically

          ## Framework
          Detected automatically

          ## Database
          Detected automatically

          ## Requirements
          - High availability
          - Auto-scaling
          - Cost-effective deployment
          - Secure infrastructure
          - Monitoring and logging
          EOL
          fi

      - name: Run Inframate
        id: run_inframate
        continue-on-error: true
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          cd target_repo
          # Enable debug output for Gemini API response
          export INFRAMATE_DEBUG=1
          python -m inframate.flow .
          
      - name: Extract Infrastructure Structure and Costs
        id: extract_infra
        continue-on-error: true
        if: steps.run_inframate.outcome == 'success'
        run: |
          cd target_repo
          
          # Debug what files were created
          echo "Files in terraform directory:"
          ls -la terraform/
          
          # Use the dedicated cost extraction script
          if [ -f "terraform/README.md" ]; then
            echo "Found terraform/README.md - Extracting cost info"
            
            # Extract and save cost information using the helper script
            COST_ESTIMATE=$(cd ../inframate && python scripts/extract_costs.py --readme ../target_repo/terraform/README.md)
            echo "COST_ESTIMATE<<EOF" >> $GITHUB_ENV
            echo "$COST_ESTIMATE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "WARNING: terraform/README.md not found"
            echo "Current directory contents:"
            ls -la
            
            # Try to find README.md elsewhere
            find . -name "README.md" -type f -exec echo "Found README at {}" \;
            
            echo "COST_ESTIMATE=Cost estimation not available" >> $GITHUB_ENV
          fi
          
          # Create infrastructure diagram summary
          echo "INFRA_STRUCTURE<<EOF" >> $GITHUB_ENV
          echo "### Infrastructure Components" >> $GITHUB_ENV
          
          # Check for networking components
          if [ -f "terraform/vpc.tf" ]; then
            echo "- **Networking**: VPC with public/private subnets" >> $GITHUB_ENV
          fi
          
          # Check for compute components
          if [ -f "terraform/ec2.tf" ]; then
            echo "- **Compute**: EC2 instances with auto-scaling" >> $GITHUB_ENV
          fi
          if [ -f "terraform/ecs.tf" ]; then
            echo "- **Compute**: ECS Fargate containers" >> $GITHUB_ENV
          fi
          if [ -f "terraform/eks.tf" ]; then
            echo "- **Compute**: Kubernetes cluster with managed node groups" >> $GITHUB_ENV
          fi
          if [ -f "terraform/nodejs_lambda.tf" ]; then
            echo "- **Compute**: Serverless Lambda functions" >> $GITHUB_ENV
          fi
          
          # Check for database components
          if [ -f "terraform/database.tf" ] || [ -f "terraform/rds.tf" ]; then
            echo "- **Database**: Amazon RDS managed database" >> $GITHUB_ENV
          fi
          if [ -f "terraform/dynamodb.tf" ]; then
            echo "- **Database**: DynamoDB NoSQL database" >> $GITHUB_ENV
          fi
          
          # Check for load balancing
          if [ -f "terraform/alb.tf" ]; then
            echo "- **Load Balancing**: Application Load Balancer" >> $GITHUB_ENV
          fi
          
          # Check for storage
          if [ -f "terraform/s3.tf" ]; then
            echo "- **Storage**: S3 bucket configuration" >> $GITHUB_ENV
          fi
          
          # Check for API
          if [ -f "terraform/api_gateway.tf" ]; then
            echo "- **API**: API Gateway for RESTful endpoints" >> $GITHUB_ENV
          fi
          
          # Check for CDN
          if [ -f "terraform/cloudfront.tf" ]; then
            echo "- **CDN**: CloudFront distribution" >> $GITHUB_ENV
          fi
          
          # Check for monitoring
          if [ -f "terraform/cloudwatch.tf" ]; then
            echo "- **Monitoring**: CloudWatch dashboards, alarms, and logging" >> $GITHUB_ENV
          fi
          
          echo "EOF" >> $GITHUB_ENV

      - name: Set Outputs
        id: set_outputs
        continue-on-error: true
        if: steps.run_inframate.outcome == 'success'
        run: |
          echo "terraform_dir=terraform" >> $GITHUB_OUTPUT

      - name: Configure Git
        continue-on-error: true
        if: steps.run_inframate.outcome == 'success'
        run: |
          cd target_repo
          git config --local user.name "Inframate Bot"
          git config --local user.email "inframate-bot@users.noreply.github.com"

      - name: Create Pull Request
        id: create_pr
        continue-on-error: true
        if: steps.run_inframate.outcome == 'success'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.REPO_PAT }}
          path: target_repo
          commit-message: "Inframate: Generated AWS Infrastructure with Terraform"
          title: "ðŸš€ Inframate: AWS Infrastructure Recommendations"
          body: |
            ## Inframate Generated Infrastructure
            
            This PR contains AWS infrastructure recommendations and Terraform files generated by Inframate, an AI-powered infrastructure assistant.
            
            ${{ env.INFRA_STRUCTURE }}
            
            ### Estimated Monthly Costs
            
            ${{ env.COST_ESTIMATE }}
            
            ### What's included
            - Complete Terraform configuration for AWS deployment
            - Infrastructure recommendations based on repository analysis
            - Ready-to-deploy AWS resources tailored to your application
            
            ### Next Steps
            1. Review the generated Terraform files in the `terraform/` directory
            2. Update variables in `terraform.tfvars` to match your requirements
            3. Run `terraform init` and `terraform plan` to verify the configuration
            4. Apply the changes with `terraform apply`
            
            ### Need help?
            Check out the README.md file in the terraform directory for detailed instructions.
          branch: "inframate/terraform-files"
          base: ${{ github.event.inputs.target_branch }}
          delete-branch: true

      - name: Debug Generated Files
        run: |
          cd target_repo
          echo "Current directory structure:"
          ls -la
          
          echo "Terraform directory contents (if exists):"
          if [ -d "terraform" ]; then
            ls -la terraform/
          else
            echo "terraform directory does not exist"
          fi

      - name: Upload Terraform as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: inframate-terraform-files
          path: target_repo/terraform/
          retention-days: 7
          if-no-files-found: warn

  terraform-plan:
    name: Terraform Plan
    needs: analyze
    runs-on: ubuntu-latest
    if: success() && needs.analyze.outputs.pr_number
    environment: 
      name: terraform-plan
      url: ${{ steps.pr_comment.outputs.pr_url }}
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: inframate/terraform-files
          repository: ${{ github.event.inputs.target_repo }}
          token: ${{ secrets.REPO_PAT }}
          
      - name: Check for Terraform Files
        id: check_files
        continue-on-error: true
        run: |
          # First try to find terraform files in the checkout
          if [ -d "terraform" ]; then
            echo "Using terraform directory from checkout"
            echo "terraform_dir_exists=true" >> $GITHUB_OUTPUT
          else
            echo "terraform directory not found in checkout"
            echo "terraform_dir_exists=false" >> $GITHUB_OUTPUT
            mkdir -p terraform
          fi
          
      - name: Download Terraform Files
        uses: actions/download-artifact@v4
        with:
          name: inframate-terraform-files
          path: terraform_artifact
        continue-on-error: true
        
      - name: Copy Artifact Files if Available
        continue-on-error: true
        run: |
          if [ -d "terraform_artifact" ] && [ "$(ls -A terraform_artifact)" ]; then
            echo "Copying files from artifact to terraform directory"
            mkdir -p terraform
            cp -r terraform_artifact/* terraform/
          else
            echo "No files in artifact directory or download failed"
          fi
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - name: Initialize Terraform
        continue-on-error: true
        run: |
          cd terraform
          terraform init
          
      - name: Create tfvars File
        continue-on-error: true
        run: |
          cd terraform
          # Create a sample tfvars file if it doesn't exist
          if [ ! -f "terraform.tfvars" ]; then
            echo "Creating sample terraform.tfvars file"
            cat > terraform.tfvars << 'EOL'
          region = "us-east-1"
          app_name = "inframate-test-app"
          environment = "dev"
          # Add more variables as needed based on your infrastructure
          EOL
          fi
          
      - name: Terraform Validate
        id: validate
        continue-on-error: true
        run: |
          cd terraform
          terraform validate -no-color
          
      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          cd terraform
          terraform plan -no-color -input=false | tee terraform_plan.txt
          
      - name: Add Plan Output to PR
        id: pr_comment
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const fs = require('fs');
            let planOutput = 'No plan output available';
            
            try {
              if (fs.existsSync('terraform/terraform_plan.txt')) {
                planOutput = fs.readFileSync('terraform/terraform_plan.txt', 'utf8');
                if (planOutput.length > 65000) {
                  planOutput = planOutput.substring(0, 65000) + '\n... (truncated)';
                }
              }
            } catch (error) {
              planOutput = `Error reading plan output: ${error.message}`;
            }
            
            const comment = await github.rest.issues.createComment({
              issue_number: ${{ needs.analyze.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output\n\n\`\`\`terraform\n${planOutput}\n\`\`\``
            });
            
            return {
              pr_url: comment.data.html_url
            };

  terraform-test:
    name: Terraform Security Test
    needs: [analyze, terraform-plan]
    runs-on: ubuntu-latest
    if: success() && needs.analyze.outputs.pr_number
    environment: 
      name: terraform-test
      url: ${{ steps.pr_comment.outputs.pr_url }}
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: inframate/terraform-files
          repository: ${{ github.event.inputs.target_repo }}
          token: ${{ secrets.REPO_PAT }}
          
      - name: Run tfsec
        id: tfsec
        continue-on-error: true
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform
          format: sarif
          out: tfsec.sarif
          
      - name: Upload SARIF file
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec.sarif
          
      - name: Add Security Analysis Results to PR
        id: pr_comment
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const fs = require('fs');
            let securityResults = '';
            
            try {
              if (fs.existsSync('tfsec.sarif')) {
                const data = JSON.parse(fs.readFileSync('tfsec.sarif', 'utf8'));
                const results = data.runs[0].results;
                
                if (results.length > 0) {
                  securityResults = `## Security Analysis Results\n\n${results.length} issues found:\n\n`;
                  
                  results.slice(0, 10).forEach((result, index) => {
                    securityResults += `${index + 1}. **${result.ruleId}**: ${result.message.text}\n`;
                    securityResults += `   - Location: ${result.locations[0].physicalLocation.artifactLocation.uri}\n`;
                    if (result.level) securityResults += `   - Severity: ${result.level}\n`;
                    securityResults += '\n';
                  });
                  
                  if (results.length > 10) {
                    securityResults += `\n... and ${results.length - 10} more issues.\n`;
                  }
                } else {
                  securityResults = '## Security Analysis Results\n\nNo security issues found! ðŸŽ‰';
                }
              } else {
                securityResults = '## Security Analysis Results\n\nNo security scan output available.';
              }
            } catch (error) {
              securityResults = `## Security Analysis Results\n\nError processing security results: ${error.message}`;
            }
            
            const comment = await github.rest.issues.createComment({
              issue_number: ${{ needs.analyze.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: securityResults
            });
            
            return {
              pr_url: comment.data.html_url
            };

  terraform-deploy:
    name: Terraform Deploy
    needs: [analyze, terraform-plan, terraform-test]
    runs-on: ubuntu-latest
    if: success() && github.event.inputs.should_deploy == 'true'
    environment: 
      name: production
      url: ${{ steps.pr_comment.outputs.pr_url }}
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: inframate/terraform-files
          repository: ${{ github.event.inputs.target_repo }}
          token: ${{ secrets.REPO_PAT }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Initialize Terraform
        continue-on-error: true
        run: |
          cd terraform
          terraform init
          
      - name: Apply Terraform Changes
        id: apply
        continue-on-error: true
        run: |
          cd terraform
          terraform apply -auto-approve -input=false | tee terraform_apply.txt
          
      - name: Add Deployment Results to PR
        id: pr_comment
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const fs = require('fs');
            let applyOutput = 'No output available';
            
            try {
              if (fs.existsSync('terraform/terraform_apply.txt')) {
                applyOutput = fs.readFileSync('terraform/terraform_apply.txt', 'utf8');
                if (applyOutput.length > 65000) {
                  applyOutput = applyOutput.substring(0, 65000) + '\n... (truncated)';
                }
              }
            } catch (error) {
              applyOutput = `Error reading apply output: ${error.message}`;
            }
            
            const comment = await github.rest.issues.createComment({
              issue_number: ${{ needs.analyze.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Deployment Results\n\n\`\`\`\n${applyOutput}\n\`\`\``
            });
            
            return {
              pr_url: comment.data.html_url
            }; 