name: Inframate Analysis

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to analyze'
        required: true
        default: '.'
      target_branch:
        description: 'Target branch to create PR against'
        required: true
        default: 'main'

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Inframate
        uses: actions/checkout@v4
        with:
          path: inframate

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo }}
          token: ${{ secrets.REPO_PAT }}
          path: target_repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'inframate/setup.py'

      - name: Install Inframate
        run: |
          python -m pip install --upgrade pip
          cd inframate
          pip install -e .

      - name: Analyze repository structure
        run: |
          cd target_repo
          echo "Analyzing repository structure..."
          ls -la
          
          # Check for common frameworks and languages
          if [ -f "package.json" ]; then
            echo "Found Node.js project"
            NODE_PROJECT=true
          fi
          
          if [ -f "requirements.txt" ]; then
            echo "Found Python project"
            PYTHON_PROJECT=true
          fi
          
          if [ -f "pom.xml" ]; then
            echo "Found Java project"
            JAVA_PROJECT=true
          fi
          
          if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
            echo "Found Docker configuration"
            DOCKER_PROJECT=true
          fi

      - name: Create sample inframate.md if needed
        run: |
          cd target_repo
          if [ ! -f "inframate.md" ]; then
            echo "Creating sample inframate.md file"
            cat > inframate.md << 'EOL'
          # Inframate Configuration

          ## Description
          This is an automated infrastructure analysis by Inframate.

          ## Language
          Detected automatically

          ## Framework
          Detected automatically

          ## Database
          Detected automatically

          ## Requirements
          - High availability
          - Auto-scaling
          - Cost-effective deployment
          - Secure infrastructure
          - Monitoring and logging
          EOL
          fi

      - name: Run Inframate
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          cd target_repo
          python -m inframate.flow .

      - name: Configure Git
        run: |
          cd target_repo
          git config --local user.name "Inframate Bot"
          git config --local user.email "inframate-bot@users.noreply.github.com"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.REPO_PAT }}
          path: target_repo
          commit-message: "Inframate: Generated AWS Infrastructure with Terraform"
          title: "ðŸš€ Inframate: AWS Infrastructure Recommendations"
          body: |
            ## Inframate Generated Infrastructure
            
            This PR contains AWS infrastructure recommendations and Terraform files generated by Inframate, an AI-powered infrastructure assistant.
            
            ### What's included
            - Complete Terraform configuration for AWS deployment
            - Infrastructure recommendations based on repository analysis
            - Ready-to-deploy AWS resources tailored to your application
            
            ### Next Steps
            1. Review the generated Terraform files in the `terraform/` directory
            2. Update variables in `terraform.tfvars` to match your requirements
            3. Run `terraform init` and `terraform plan` to verify the configuration
            4. Apply the changes with `terraform apply`
            
            ### Need help?
            Check out the README.md file in the terraform directory for detailed instructions.
          branch: "inframate/terraform-files"
          base: ${{ github.event.inputs.target_branch }}
          delete-branch: true 