name: Inframate Analysis

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to analyze'
        required: true
        default: '.'
      target_branch:
        description: 'Target branch to create PR against'
        required: true
        default: 'main'

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Inframate
        uses: actions/checkout@v4
        with:
          path: inframate

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo }}
          token: ${{ secrets.REPO_PAT }}
          path: target_repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'inframate/setup.py'

      - name: Install Minimal Dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Create and activate a clean virtual environment
          cd inframate
          
          # Tell pip to not use a cache
          pip config set global.cache-dir false
          
          # Install core dependencies first
          pip install requests pathlib boto3 pyyaml python-dotenv google-generativeai gitpython click colorama numpy
          
          # Install langchain ecosystem without constraints
          pip install tiktoken
          pip install langchain>=0.3.0 langchain-community>=0.3.0 langchain-huggingface>=0.1.0
          
          # Install remaining dependencies
          pip install sentence-transformers>=2.6.0 faiss-cpu>=1.7.4
          
          # Now install our package without dependencies
          pip install -e . --no-dependencies
          
      - name: Verify Dependencies
        run: |
          cd inframate
          python scripts/verify_deps.py
          
      - name: Debug Package Versions
        run: |
          cd inframate
          echo "Installed package versions:"
          pip list | grep -E 'langchain|tiktoken|sentence-transformers|faiss|numpy|requests'
          
      - name: Analyze repository structure
        run: |
          cd target_repo
          echo "Analyzing repository structure..."
          ls -la
          
          # Check for common frameworks and languages
          if [ -f "package.json" ]; then
            echo "Found Node.js project"
            NODE_PROJECT=true
          fi
          
          if [ -f "requirements.txt" ]; then
            echo "Found Python project"
            PYTHON_PROJECT=true
          fi
          
          if [ -f "pom.xml" ]; then
            echo "Found Java project"
            JAVA_PROJECT=true
          fi
          
          if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
            echo "Found Docker configuration"
            DOCKER_PROJECT=true
          fi

      - name: Create sample inframate.md if needed
        run: |
          cd target_repo
          if [ ! -f "inframate.md" ]; then
            echo "Creating sample inframate.md file"
            cat > inframate.md << 'EOL'
          # Inframate Configuration

          ## Description
          This is an automated infrastructure analysis by Inframate.

          ## Language
          Detected automatically

          ## Framework
          Detected automatically

          ## Database
          Detected automatically

          ## Requirements
          - High availability
          - Auto-scaling
          - Cost-effective deployment
          - Secure infrastructure
          - Monitoring and logging
          EOL
          fi

      - name: Run Inframate
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          cd target_repo
          # Enable debug output for Gemini API response
          export INFRAMATE_DEBUG=1
          python -m inframate.flow .
          
      - name: Extract Infrastructure Structure and Costs
        id: extract_infra
        run: |
          cd target_repo
          
          # Debug what files were created
          echo "Files in terraform directory:"
          ls -la terraform/
          
          # Use the dedicated cost extraction script
          if [ -f "terraform/README.md" ]; then
            echo "Found terraform/README.md - Extracting cost info"
            
            # Extract and save cost information using the helper script
            COST_ESTIMATE=$(cd ../inframate && python scripts/extract_costs.py --readme ../target_repo/terraform/README.md)
            echo "COST_ESTIMATE<<EOF" >> $GITHUB_ENV
            echo "$COST_ESTIMATE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "WARNING: terraform/README.md not found"
            echo "Current directory contents:"
            ls -la
            
            # Try to find README.md elsewhere
            find . -name "README.md" -type f -exec echo "Found README at {}" \;
            
            echo "COST_ESTIMATE=Cost estimation not available" >> $GITHUB_ENV
          fi
          
          # Create infrastructure diagram summary
          echo "INFRA_STRUCTURE<<EOF" >> $GITHUB_ENV
          echo "### Infrastructure Components" >> $GITHUB_ENV
          
          # Check for networking components
          if [ -f "vpc.tf" ]; then
            echo "- **Networking**: VPC with public/private subnets" >> $GITHUB_ENV
          fi
          
          # Check for compute components
          if [ -f "ec2.tf" ]; then
            echo "- **Compute**: EC2 instances with auto-scaling" >> $GITHUB_ENV
          fi
          if [ -f "ecs.tf" ]; then
            echo "- **Compute**: ECS Fargate containers" >> $GITHUB_ENV
          fi
          if [ -f "eks.tf" ]; then
            echo "- **Compute**: Kubernetes cluster with managed node groups" >> $GITHUB_ENV
          fi
          if [ -f "nodejs_lambda.tf" ]; then
            echo "- **Compute**: Serverless Lambda functions" >> $GITHUB_ENV
          fi
          
          # Check for database components
          if [ -f "database.tf" ] || [ -f "rds.tf" ]; then
            echo "- **Database**: Amazon RDS managed database" >> $GITHUB_ENV
          fi
          if [ -f "dynamodb.tf" ]; then
            echo "- **Database**: DynamoDB NoSQL database" >> $GITHUB_ENV
          fi
          
          # Check for load balancing
          if [ -f "alb.tf" ]; then
            echo "- **Load Balancing**: Application Load Balancer" >> $GITHUB_ENV
          fi
          
          # Check for storage
          if [ -f "s3.tf" ]; then
            echo "- **Storage**: S3 bucket configuration" >> $GITHUB_ENV
          fi
          
          # Check for API
          if [ -f "api_gateway.tf" ]; then
            echo "- **API**: API Gateway for RESTful endpoints" >> $GITHUB_ENV
          fi
          
          # Check for CDN
          if [ -f "cloudfront.tf" ]; then
            echo "- **CDN**: CloudFront distribution" >> $GITHUB_ENV
          fi
          
          # Check for monitoring
          if [ -f "cloudwatch.tf" ]; then
            echo "- **Monitoring**: CloudWatch dashboards, alarms, and logging" >> $GITHUB_ENV
          fi
          
          echo "EOF" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          cd target_repo
          git config --local user.name "Inframate Bot"
          git config --local user.email "inframate-bot@users.noreply.github.com"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.REPO_PAT }}
          path: target_repo
          commit-message: "Inframate: Generated AWS Infrastructure with Terraform"
          title: "ðŸš€ Inframate: AWS Infrastructure Recommendations"
          body: |
            ## Inframate Generated Infrastructure
            
            This PR contains AWS infrastructure recommendations and Terraform files generated by Inframate, an AI-powered infrastructure assistant.
            
            ${{ env.INFRA_STRUCTURE }}
            
            ### Estimated Monthly Costs
            
            ${{ env.COST_ESTIMATE }}
            
            ### What's included
            - Complete Terraform configuration for AWS deployment
            - Infrastructure recommendations based on repository analysis
            - Ready-to-deploy AWS resources tailored to your application
            
            ### Next Steps
            1. Review the generated Terraform files in the `terraform/` directory
            2. Update variables in `terraform.tfvars` to match your requirements
            3. Run `terraform init` and `terraform plan` to verify the configuration
            4. Apply the changes with `terraform apply`
            
            ### Need help?
            Check out the README.md file in the terraform directory for detailed instructions.
          branch: "inframate/terraform-files"
          base: ${{ github.event.inputs.target_branch }}
          delete-branch: true 