name: Error Recovery Handler

# Add permissions declaration at the workflow level
permissions:
  actions: write
  contents: read
  issues: write
  pull-requests: write

on:
  # Manually trigger error recovery for any failed workflow
  workflow_dispatch:
    inputs:
      workflow_id:
        description: 'ID of the failed workflow'
        required: false
      error_type:
        description: 'Type of error to handle'
        required: false
        default: 'auto_detect'
        type: choice
        options:
          - auto_detect
          - terraform_error
          - visualization_error
          - infrastructure_error
          - general_error
      error_message:
        description: 'Error message (optional)'
        required: false
      repo_path:
        description: 'Repository path to analyze'
        required: false
        default: '.'
      autonomous_mode:
        description: 'Run in autonomous mode'
        required: false
        type: boolean
        default: false
      artifact_name:
        description: 'Specific artifact to analyze (optional)'
        required: false
  
  # Scheduled check for any failed workflows (runs every 6 hours)
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  
  # Automatically trigger when other workflows fail
  workflow_run:
    types: [failed]
    workflows: ["Create Infrastructure", "Infra Visualization", "Agentic Infrastructure Management"]

jobs:
  error-recovery:
    name: Error Recovery
    runs-on: ubuntu-latest
    # Only run when the triggering workflow has failed or when manually triggered or on schedule
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'workflow_run' || 
      github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv google-generativeai tabulate
      
      - name: Set up artifact directory
        id: setup
        run: |
          mkdir -p recovery_artifacts
          echo "ARTIFACTS_DIR=$(pwd)/recovery_artifacts" >> $GITHUB_ENV
          echo "RUN_TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
      
      - name: Find failed workflows
        id: find_failed
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          # For manual dispatch or workflow_run events, use the provided workflow ID
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.workflow_id }}" ]; then
            echo "workflow_id=${{ github.event.inputs.workflow_id }}" >> $GITHUB_OUTPUT
            echo "has_failed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For workflow_run events, use the triggering workflow
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "workflow_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
            echo "has_failed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For scheduled runs, look for recent failed workflows
          if [ "${{ github.event_name }}" == "schedule" ]; then
            # Get failed workflows from the last 6 hours
            FAILED_WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.conclusion=="failure" and .created_at > (now - 21600)) | .id')
            
            if [ -n "$FAILED_WORKFLOWS" ]; then
              echo "workflow_id=$(echo "$FAILED_WORKFLOWS" | head -n1)" >> $GITHUB_OUTPUT
              echo "has_failed=true" >> $GITHUB_OUTPUT
            else
              echo "has_failed=false" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Skip if no failed workflows found
        if: github.event_name == 'schedule' && steps.find_failed.outputs.has_failed == 'false'
        run: |
          echo "No failed workflows found to analyze"
          exit 0
      
      - name: Get workflow details
        id: workflow_details
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          WORKFLOW_ID=${{ steps.find_failed.outputs.workflow_id }}
          echo "Fetching details for workflow ID: $WORKFLOW_ID"
          
          # Verify repository name format
          REPO="${{ github.repository }}"
          echo "Repository: $REPO"
          
          # Get workflow info with error handling
          HTTP_STATUS=$(curl -s -o workflow_data.json -w "%{http_code}" \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/actions/runs/$WORKFLOW_ID")
          
          # Check if API call was successful
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "::error::Failed to fetch workflow data. HTTP Status: $HTTP_STATUS"
            cat workflow_data.json
            echo "workflow_name=Unknown" >> $GITHUB_OUTPUT
            echo "workflow_conclusion=Unknown" >> $GITHUB_OUTPUT
            echo "failed_job=Unknown" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Show full response for debugging
          echo "API Response:"
          cat workflow_data.json
          
          # Check if the response contains valid data
          if ! jq -e '.' workflow_data.json > /dev/null 2>&1; then
            echo "::error::Invalid JSON response from GitHub API"
            echo "workflow_name=Unknown" >> $GITHUB_OUTPUT
            echo "workflow_conclusion=Unknown" >> $GITHUB_OUTPUT
            echo "failed_job=Unknown" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract workflow name and conclusion with safe fallbacks
          WORKFLOW_NAME=$(jq -r '.name // "Unknown"' workflow_data.json)
          WORKFLOW_CONCLUSION=$(jq -r '.conclusion // "Unknown"' workflow_data.json)
          
          echo "Workflow Name: $WORKFLOW_NAME"
          echo "Workflow Conclusion: $WORKFLOW_CONCLUSION"
          
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
          echo "workflow_conclusion=$WORKFLOW_CONCLUSION" >> $GITHUB_OUTPUT
          
          # Get jobs for this workflow run
          HTTP_STATUS=$(curl -s -o workflow_jobs.json -w "%{http_code}" \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/actions/runs/$WORKFLOW_ID/jobs")
          
          # Check if jobs API call was successful
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "::error::Failed to fetch job data. HTTP Status: $HTTP_STATUS"
            cat workflow_jobs.json
            echo "failed_job=Unknown" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Show jobs for debugging
          echo "Jobs Response:"
          cat workflow_jobs.json
          
          # Extract failed job with safe handling
          if jq -e '.jobs' workflow_jobs.json > /dev/null 2>&1; then
            FAILED_JOB=$(jq -r '.jobs[] | select(.conclusion=="failure") | .name' workflow_jobs.json | head -n1)
            JOB_ID=$(jq -r '.jobs[] | select(.conclusion=="failure") | .id' workflow_jobs.json | head -n1)
          elif jq -e '.[]' workflow_jobs.json > /dev/null 2>&1; then
            FAILED_JOB=$(jq -r '.[] | select(.conclusion=="failure") | .name' workflow_jobs.json | head -n1)
            JOB_ID=$(jq -r '.[] | select(.conclusion=="failure") | .id' workflow_jobs.json | head -n1)
          else
            FAILED_JOB="Unknown"
            JOB_ID=""
          fi
          
          if [ -z "$FAILED_JOB" ]; then
            FAILED_JOB="Unknown"
          fi
          
          echo "Failed Job: $FAILED_JOB"
          echo "failed_job=$FAILED_JOB" >> $GITHUB_OUTPUT
          
          # Get error logs if job ID is available
          if [ -n "$JOB_ID" ]; then
            echo "Fetching logs for job ID: $JOB_ID"
            curl -s -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/actions/jobs/$JOB_ID/logs" > error_logs.txt
          else
            echo "No failed jobs found or job ID not available."
            echo "Creating empty error logs file."
            echo "No error logs available. Could not determine the failed job." > error_logs.txt
          fi
      
      - name: Determine error type
        id: error_type
        run: |
          # Use provided error type if specified
          if [ "${{ github.event.inputs.error_type }}" != "auto_detect" ]; then
            echo "error_type=${{ github.event.inputs.error_type }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Auto-detect error type based on workflow name and logs
          if [ "${{ steps.workflow_details.outputs.workflow_name }}" == "Infra Visualization" ]; then
            echo "error_type=visualization_error" >> $GITHUB_OUTPUT
          elif [ "${{ steps.workflow_details.outputs.workflow_name }}" == "Create Infrastructure" ]; then
            if grep -q "terraform" error_logs.txt; then
              echo "error_type=terraform_error" >> $GITHUB_OUTPUT
            else
              echo "error_type=infrastructure_error" >> $GITHUB_OUTPUT
            fi
          else
            echo "error_type=general_error" >> $GITHUB_OUTPUT
          fi
      
      - name: Run error recovery script
        id: recovery
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ERROR_TYPE: ${{ steps.error_type.outputs.error_type }}
          WORKFLOW_ID: ${{ steps.find_failed.outputs.workflow_id }}
          WORKFLOW_NAME: ${{ steps.workflow_details.outputs.workflow_name }}
          FAILED_JOB: ${{ steps.workflow_details.outputs.failed_job }}
        run: |
          # Create error recovery directory
          mkdir -p error_recovery
          
          # Extract error logs safely with tail to avoid large file issues
          if [ -f "error_logs.txt" ]; then
            tail -n 1000 error_logs.txt > error_logs_excerpt.txt
            ERROR_LOGS=$(cat error_logs_excerpt.txt)
          else
            ERROR_LOGS="No error logs available"
          fi
          
          # Create a default recovery plan in case script fails
          cat > error_recovery/recovery_plan.json << EOF
          {
            "error_type": "$ERROR_TYPE",
            "root_cause": "Unable to analyze workflow with ID $WORKFLOW_ID. This could be due to insufficient permissions, invalid workflow ID, or the workflow run no longer exists.",
            "solution": "Verify the workflow ID and ensure it exists. Check that the REPO_PAT token has sufficient permissions to access workflow details.",
            "prevention": "Improve error handling and validation for workflow IDs in the error recovery workflow."
          }
          EOF
          
          # Initialize AUTONOMOUS_ARG
          AUTONOMOUS_ARG=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            AUTONOMOUS_ARG="--autonomous"
          fi
          
          # Check if error recovery script exists
          if [ -f "scripts/error_recovery.py" ]; then
            # Run the error recovery script
            python scripts/error_recovery.py \
              --error-type "$ERROR_TYPE" \
              --workflow-id "$WORKFLOW_ID" \
              --workflow-name "$WORKFLOW_NAME" \
              --failed-job "$FAILED_JOB" \
              --error-logs "$ERROR_LOGS" \
              --output error_recovery/recovery_plan.json \
              $AUTONOMOUS_ARG
            
            # Set outputs based on exit code
            if [ $? -eq 0 ]; then
              echo "recovery_success=true" >> $GITHUB_OUTPUT
            else
              echo "recovery_success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::Error recovery script not found at scripts/error_recovery.py"
            echo "recovery_success=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create recovery issue
        if: steps.recovery.outputs.recovery_success == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const fs = require('fs');
            let recoveryPlan;
            
            try {
              recoveryPlan = JSON.parse(fs.readFileSync('error_recovery/recovery_plan.json', 'utf8'));
            } catch (error) {
              console.log(`Error reading recovery plan: ${error.message}`);
              recoveryPlan = {
                error_type: "unknown",
                root_cause: "Failed to read recovery plan file",
                solution: "Check workflow logs for details",
                prevention: "Improve error handling in recovery workflow"
              };
            }
            
            try {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Error Recovery Plan: ${context.payload.workflow_run?.name || 'Unknown Workflow'}`,
                body: `## Error Recovery Plan\n\n` +
                      `### Error Type\n${recoveryPlan.error_type}\n\n` +
                      `### Root Cause\n${recoveryPlan.root_cause}\n\n` +
                      `### Solution\n${recoveryPlan.solution}\n\n` +
                      `### Prevention\n${recoveryPlan.prevention}\n\n` +
                      `### Additional Context\n` +
                      `- Workflow: ${context.payload.workflow_run?.name || 'Unknown'}\n` +
                      `- Failed Job: ${context.payload.workflow_run?.jobs?.[0]?.name || 'Unknown'}\n` +
                      `- Error Time: ${new Date().toISOString()}\n\n` +
                      `This issue was automatically created by the error recovery system.`,
                labels: ['error-recovery', 'automated']
              });
              
              console.log(`Created recovery issue #${issue.data.number}`);
            } catch (error) {
              console.log(`Error creating issue: ${error.message}`);
            }
      
      - name: Comment on PR
        if: steps.recovery.outputs.recovery_success == 'true'
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const fs = require('fs');
            let recoveryPlan;
            
            try {
              recoveryPlan = JSON.parse(fs.readFileSync('error_recovery/recovery_plan.json', 'utf8'));
            } catch (error) {
              console.log(`Error reading recovery plan: ${error.message}`);
              recoveryPlan = {
                error_type: "unknown",
                root_cause: "Failed to read recovery plan file",
                solution: "Check workflow logs for details",
                prevention: "Improve error handling in recovery workflow"
              };
            }
            
            try {
              // Find the PR associated with the workflow
              const workflowId = '${{ steps.find_failed.outputs.workflow_id }}';
              console.log(`Looking for PR associated with workflow ID: ${workflowId}`);
              
              const workflow = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: workflowId
              });
              
              console.log(`Found workflow run. Commit message: ${workflow.data.head_commit?.message || 'Unknown'}`);
              
              // Extract PR number from workflow
              const prMatch = workflow.data.head_commit?.message?.match(/\(#(\d+)\)/);
              if (prMatch) {
                const prNumber = prMatch[1];
                console.log(`Found PR number: ${prNumber}`);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `## 🛠️ Error Recovery Plan\n\n` +
                        `An error was detected and a recovery plan has been created.\n\n` +
                        `### Error Type\n${recoveryPlan.error_type}\n\n` +
                        `### Solution\n${recoveryPlan.solution}\n\n` +
                        `### Prevention\n${recoveryPlan.prevention}\n\n` +
                        `A detailed issue has been created with more information.`
                });
                
                console.log(`Added comment to PR #${prNumber}`);
              } else {
                console.log(`No PR number found in commit message`);
              }
            } catch (error) {
              console.log(`Error handling PR comment: ${error.message}`);
            }
      
      - name: Upload recovery artifacts
        uses: actions/upload-artifact@v4
        with:
          name: error-recovery-${{ env.RUN_TIMESTAMP }}
          path: ${{ env.ARTIFACTS_DIR }}
      
      - name: Report workflow completion
        if: always()
        run: |
          if [ "${{ steps.recovery.outputs.recovery_success }}" == "true" ]; then
            echo "::notice::Error recovery completed successfully"
            echo "Check the artifacts for recovery details"
          else
            echo "::warning::Error recovery failed"
            echo "An issue has been created with recovery details"
          fi 