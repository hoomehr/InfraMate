name: Error Recovery Handler

# Add permissions declaration at the workflow level
permissions:
  actions: write
  contents: read
  issues: write
  pull-requests: write

on:
  # Manually trigger error recovery for any failed workflow
  workflow_dispatch:
    inputs:
      workflow_id:
        description: 'ID of the failed workflow'
        required: false
      error_type:
        description: 'Type of error to handle'
        required: false
        default: 'auto_detect'
        type: choice
        options:
          - auto_detect
          - terraform_error
          - visualization_error
          - infrastructure_error
          - general_error
      error_message:
        description: 'Error message (optional)'
        required: false
      repo_path:
        description: 'Repository path to analyze'
        required: false
        default: '.'
      autonomous_mode:
        description: 'Run in autonomous mode'
        required: false
        type: boolean
        default: false
      artifact_name:
        description: 'Specific artifact to analyze (optional)'
        required: false
  
  # Scheduled check for any failed workflows (runs every 6 hours)
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  
  # Automatically trigger when other workflows fail
  workflow_run:
    types: [completed]
    workflows: ["Create Infrastructure", "Infra Visualization", "Agentic Infrastructure Management"]

jobs:
  error-recovery:
    name: Error Recovery
    runs-on: ubuntu-latest
    # Only run when the triggering workflow has failed or when manually triggered or on schedule
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') || 
      github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv google-generativeai tabulate
      
      - name: Set up artifact directory
        id: setup
        run: |
          mkdir -p recovery_artifacts
          echo "ARTIFACTS_DIR=$(pwd)/recovery_artifacts" >> $GITHUB_ENV
          echo "RUN_TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
      
      - name: Find failed workflows
        id: find_failed
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          # For manual dispatch or workflow_run events, use the provided workflow ID
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.workflow_id }}" ]; then
            echo "workflow_id=${{ github.event.inputs.workflow_id }}" >> $GITHUB_OUTPUT
            echo "has_failed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For workflow_run events, use the triggering workflow
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "workflow_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
            echo "has_failed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For scheduled runs, look for recent failed workflows
          if [ "${{ github.event_name }}" == "schedule" ]; then
            # Get failed workflows from the last 6 hours
            FAILED_WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.conclusion=="failure" and .created_at > (now - 21600)) | .id')
            
            if [ -n "$FAILED_WORKFLOWS" ]; then
              echo "workflow_id=$(echo "$FAILED_WORKFLOWS" | head -n1)" >> $GITHUB_OUTPUT
              echo "has_failed=true" >> $GITHUB_OUTPUT
            else
              echo "has_failed=false" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Skip if no failed workflows found
        if: github.event_name == 'schedule' && steps.find_failed.outputs.has_failed == 'false'
        run: |
          echo "No failed workflows found to analyze"
          exit 0
      
      - name: Get workflow details
        id: workflow_details
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          WORKFLOW_ID=${{ steps.find_failed.outputs.workflow_id }}
          WORKFLOW_DATA=$(gh api repos/${{ github.repository }}/actions/runs/$WORKFLOW_ID)
          
          # Extract workflow name and conclusion
          WORKFLOW_NAME=$(echo "$WORKFLOW_DATA" | jq -r '.name')
          WORKFLOW_CONCLUSION=$(echo "$WORKFLOW_DATA" | jq -r '.conclusion')
          
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
          echo "workflow_conclusion=$WORKFLOW_CONCLUSION" >> $GITHUB_OUTPUT
          
          # Get the failed job
          FAILED_JOB=$(echo "$WORKFLOW_DATA" | jq -r '.jobs[] | select(.conclusion=="failure") | .name')
          echo "failed_job=$FAILED_JOB" >> $GITHUB_OUTPUT
          
          # Get error logs
          JOB_ID=$(echo "$WORKFLOW_DATA" | jq -r '.jobs[] | select(.conclusion=="failure") | .id')
          if [ -n "$JOB_ID" ]; then
            gh api repos/${{ github.repository }}/actions/jobs/$JOB_ID/logs > error_logs.txt
          fi
      
      - name: Determine error type
        id: error_type
        run: |
          # Use provided error type if specified
          if [ "${{ github.event.inputs.error_type }}" != "auto_detect" ]; then
            echo "error_type=${{ github.event.inputs.error_type }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Auto-detect error type based on workflow name and logs
          if [ "${{ steps.workflow_details.outputs.workflow_name }}" == "Infra Visualization" ]; then
            echo "error_type=visualization_error" >> $GITHUB_OUTPUT
          elif [ "${{ steps.workflow_details.outputs.workflow_name }}" == "Create Infrastructure" ]; then
            if grep -q "terraform" error_logs.txt; then
              echo "error_type=terraform_error" >> $GITHUB_OUTPUT
            else
              echo "error_type=infrastructure_error" >> $GITHUB_OUTPUT
            fi
          else
            echo "error_type=general_error" >> $GITHUB_OUTPUT
          fi
      
      - name: Run error recovery script
        id: recovery
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ERROR_TYPE: ${{ steps.error_type.outputs.error_type }}
          WORKFLOW_ID: ${{ steps.find_failed.outputs.workflow_id }}
          WORKFLOW_NAME: ${{ steps.workflow_details.outputs.workflow_name }}
          FAILED_JOB: ${{ steps.workflow_details.outputs.failed_job }}
        run: |
          # Create error recovery directory
          mkdir -p error_recovery
          
          # Extract error outputs to variables to avoid substitution issues
          ERROR_LOGS=$(cat error_logs.txt)
          
          # Initialize AUTONOMOUS_ARG
          AUTONOMOUS_ARG=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            AUTONOMOUS_ARG="--autonomous"
          fi
          
          # Run the error recovery script
          python scripts/error_recovery.py \
            --error-type "$ERROR_TYPE" \
            --workflow-id "$WORKFLOW_ID" \
            --workflow-name "$WORKFLOW_NAME" \
            --failed-job "$FAILED_JOB" \
            --error-logs "$ERROR_LOGS" \
            --output error_recovery/recovery_plan.json \
            $AUTONOMOUS_ARG
          
          # Set outputs based on exit code
          if [ $? -eq 0 ]; then
            echo "recovery_success=true" >> $GITHUB_OUTPUT
          else
            echo "recovery_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create recovery issue
        if: steps.recovery.outputs.recovery_success == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const fs = require('fs');
            const recoveryPlan = JSON.parse(fs.readFileSync('error_recovery/recovery_plan.json', 'utf8'));
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Error Recovery Plan: ${context.payload.workflow_run?.name || 'Unknown Workflow'}`,
              body: `## Error Recovery Plan\n\n` +
                    `### Error Type\n${recoveryPlan.error_type}\n\n` +
                    `### Root Cause\n${recoveryPlan.root_cause}\n\n` +
                    `### Solution\n${recoveryPlan.solution}\n\n` +
                    `### Prevention\n${recoveryPlan.prevention}\n\n` +
                    `### Additional Context\n` +
                    `- Workflow: ${context.payload.workflow_run?.name || 'Unknown'}\n` +
                    `- Failed Job: ${context.payload.workflow_run?.jobs?.[0]?.name || 'Unknown'}\n` +
                    `- Error Time: ${new Date().toISOString()}\n\n` +
                    `This issue was automatically created by the error recovery system.`,
              labels: ['error-recovery', 'automated']
            });
            
            console.log(`Created recovery issue #${issue.data.number}`);
      
      - name: Comment on PR
        if: steps.recovery.outputs.recovery_success == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const fs = require('fs');
            const recoveryPlan = JSON.parse(fs.readFileSync('error_recovery/recovery_plan.json', 'utf8'));
            
            // Find the PR associated with the workflow
            const workflowId = '${{ steps.find_failed.outputs.workflow_id }}';
            const workflow = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowId
            });
            
            // Extract PR number from workflow
            const prMatch = workflow.data.head_commit.message.match(/\(#(\d+)\)/);
            if (prMatch) {
              const prNumber = prMatch[1];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `## 🛠️ Error Recovery Plan\n\n` +
                      `An error was detected and a recovery plan has been created.\n\n` +
                      `### Error Type\n${recoveryPlan.error_type}\n\n` +
                      `### Solution\n${recoveryPlan.solution}\n\n` +
                      `### Prevention\n${recoveryPlan.prevention}\n\n` +
                      `A detailed issue has been created with more information.`
              });
            }
      
      - name: Upload recovery artifacts
        uses: actions/upload-artifact@v4
        with:
          name: error-recovery-${{ env.RUN_TIMESTAMP }}
          path: ${{ env.ARTIFACTS_DIR }}
      
      - name: Report workflow completion
        if: always()
        run: |
          if [ "${{ steps.recovery.outputs.recovery_success }}" == "true" ]; then
            echo "::notice::Error recovery completed successfully"
            echo "Check the artifacts for recovery details"
          else
            echo "::warning::Error recovery failed"
            echo "An issue has been created with recovery details"
          fi 