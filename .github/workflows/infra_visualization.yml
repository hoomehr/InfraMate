name: Infra Visualization

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to visualize'
        required: true
        default: '.'
      target_branch:
        description: 'Branch to visualize'
        required: true
        default: 'main'

jobs:
  visualize-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Inframate
        uses: actions/checkout@v4
        with:
          path: inframate
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo }}
          ref: ${{ github.event.inputs.target_branch }}
          path: target_repo
          token: ${{ secrets.REPO_PAT }}

      - name: Find Terraform files
        id: find_tf
        run: |
          cd target_repo
          echo "Scanning for Terraform files..."
          TF_FILES=$(find . -name "*.tf" | sort)
          
          if [ -z "$TF_FILES" ]; then
            echo "No Terraform files found in the repository."
            echo "tf_found=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Found Terraform files:"
            echo "$TF_FILES"
            echo "tf_found=true" >> $GITHUB_OUTPUT
            
            # Find the main Terraform directory
            MAIN_TF_DIR=$(dirname $(find . -name "*.tf" | sort) | sort | uniq -c | sort -nr | head -1 | awk '{print $2}')
            echo "main_tf_dir=$MAIN_TF_DIR" >> $GITHUB_OUTPUT
          fi

      - name: Set up Terraform visualization tools
        if: steps.find_tf.outputs.tf_found == 'true'
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y graphviz python3-pip

          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
          sudo apt-get install -y terraform

          # Install Python dependencies
          pip install pydot networkx matplotlib
          
          # Create visualization directory
          mkdir -p visualization_output

      - name: Create visualization scripts directory
        if: steps.find_tf.outputs.tf_found == 'true'
        run: |
          mkdir -p scripts
          cp -r inframate/scripts/visualization/* scripts/

      - name: Generate Infrastructure Visualization
        if: steps.find_tf.outputs.tf_found == 'true'
        env:
          MAIN_TF_DIR: ${{ steps.find_tf.outputs.main_tf_dir }}
        run: |
          # Access the output variable from environment variable
          if [ -z "$MAIN_TF_DIR" ]; then
            MAIN_TF_DIR="."
          fi
          
          # Create visualization directory in the workspace (not inside target_repo)
          mkdir -p visualization_output
          
          # Find all terraform directories in target repo
          cd target_repo
          echo "Generating visualization from terraform directories in $(pwd)"
          
          # Ensure the directory exists
          if [ ! -d "$MAIN_TF_DIR" ]; then
            echo "Error: Directory $MAIN_TF_DIR does not exist"
            exit 1
          fi
          
          echo "Running visualization on terraform directory: $MAIN_TF_DIR"
          
          # Run the visualization script
          python3 ../scripts/tf_visualizer.py "$MAIN_TF_DIR" "../visualization_output"
          
          cd ..

      - name: Prepare visualization in target repo
        if: steps.find_tf.outputs.tf_found == 'true'
        run: |
          # Create a new branch in the target repo for visualizations
          cd target_repo
          git config --local user.email "inframate-bot@github.com"
          git config --local user.name "InframateBot"
          
          # Create visualizations directory in target repo
          mkdir -p visualizations
          
          # Copy visualization files from workspace to target repo
          cp -r ../visualization_output/* visualizations/
          
          # Create markdown with diagrams
          echo "# Infrastructure Visualization" > visualizations/README.md
          echo "" >> visualizations/README.md
          echo "## Overview" >> visualizations/README.md
          echo "" >> visualizations/README.md
          echo "This visualization shows the AWS infrastructure defined in the Terraform files." >> visualizations/README.md
          echo "Generated by Inframate on $(date)" >> visualizations/README.md
          echo "" >> visualizations/README.md
          
          # Add infrastructure diagram if it exists
          if [ -f "visualizations/infrastructure-diagram.png" ]; then
            echo "## Infrastructure Diagram" >> visualizations/README.md
            echo "" >> visualizations/README.md
            echo "![Infrastructure Diagram](infrastructure-diagram.png)" >> visualizations/README.md
            echo "" >> visualizations/README.md
          fi
          
          # Add resource summary if it exists
          if [ -f "visualizations/resource-summary.png" ]; then
            echo "## Resource Summary" >> visualizations/README.md
            echo "" >> visualizations/README.md
            echo "![Resource Summary](resource-summary.png)" >> visualizations/README.md
            echo "" >> visualizations/README.md
          fi
          
          # Include resource summary table if available
          if [ -f "visualizations/resource-summary.md" ]; then
            cat visualizations/resource-summary.md >> visualizations/README.md
          fi
          
          # Check if there are changes to commit
          if git diff --quiet --exit-code; then
            echo "No changes to commit"
          else
            echo "Changes detected, preparing commit"
          fi

      - name: Clean up Terraform provider files
        if: steps.find_tf.outputs.tf_found == 'true'
        run: |
          cd target_repo
          # Remove .terraform directories and provider files before commit
          find . -type d -name ".terraform" -exec rm -rf {} \; 2>/dev/null || true
          find . -name "terraform-provider-*" -type f -delete 2>/dev/null || true
          # Remove any other large files that might have been generated
          find . -type f -size +95M -delete 2>/dev/null || true
          
          # Make sure .gitignore exists and has Terraform rules
          if [ ! -f ".gitignore" ]; then
            cp ../inframate/.gitignore .
          else
            # Check if Terraform rules exist in .gitignore
            if ! grep -q "**/.terraform/\*" .gitignore; then
              echo "" >> .gitignore
              echo "# Terraform" >> .gitignore
              echo "**/.terraform/*" >> .gitignore
              echo "*.tfstate" >> .gitignore
              echo "*.tfstate.*" >> .gitignore
              echo "terraform.tfvars" >> .gitignore
              echo ".terraform.lock.hcl" >> .gitignore
              echo "" >> .gitignore
              echo "# Terraform provider files" >> .gitignore
              echo "**/terraform-provider-*" >> .gitignore
            fi
          fi

      - name: Create Visualization Branch and PR
        if: steps.find_tf.outputs.tf_found == 'true'
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          cd target_repo
          
          # Create new branch for visualization
          BRANCH_NAME="infra-visualization-$(date +%Y%m%d%H%M%S)"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b $BRANCH_NAME
          
          # Stage only the visualization directory
          git add visualizations/
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit changes
          git commit -m "Add infrastructure visualization"
          
          # Get the remote URL from inputs
          REPO="${{ github.event.inputs.target_repo }}"
          
          # Remove https://github.com/ if present
          REPO="${REPO#https://github.com/}"
          echo "Target repo: $REPO"
          
          # Push directly to the target repository
          git push "https://x-access-token:${GH_TOKEN}@github.com/${REPO}" $BRANCH_NAME
          
          # Create PR body file
          cat > pr_body.md << 'EOF'
# ðŸ“Š Infrastructure Visualization

This PR adds visualizations of your AWS infrastructure defined in Terraform files.

## What's included
- Infrastructure diagram showing resources and their relationships
- Summary of AWS resources used in your Terraform code
- Visual representation of your cloud architecture

These visualizations help with:
- Understanding the overall architecture
- Identifying resource dependencies
- Documenting your infrastructure
- Communicating the design to team members

The visualizations are available in the `visualizations` directory.

_Generated by Inframate on $(date)_
EOF
          
          # Create PR using GitHub CLI with body from file
          PR_URL=$(gh pr create --repo "$REPO" \
            --base "${{ github.event.inputs.target_branch }}" \
            --head "$BRANCH_NAME" \
            --title "ðŸ“Š Infrastructure Visualization" \
            --body-file pr_body.md)
            
          echo "Created PR: $PR_URL"
      
      - name: Upload Visualizations
        if: steps.find_tf.outputs.tf_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-visualizations
          path: visualization_output
          retention-days: 7 