name: Security Scan

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to scan'
        required: true
        default: '.'
      target_branch:
        description: 'Branch to scan'
        required: true
        default: 'main'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Inframate
        uses: actions/checkout@v4
        with:
          path: inframate
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo }}
          ref: ${{ github.event.inputs.target_branch }}
          path: target_repo
      
      - name: Find Terraform files
        id: find_tf
        run: |
          cd target_repo
          echo "Scanning for Terraform files..."
          TF_FILES=$(find . -name "*.tf" | sort)
          
          if [ -z "$TF_FILES" ]; then
            echo "No Terraform files found in the repository."
            echo "tf_found=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Found Terraform files:"
            echo "$TF_FILES"
            echo "tf_found=true" >> $GITHUB_OUTPUT
            
            # Find the main Terraform directory
            MAIN_TF_DIR=$(dirname $(find . -name "*.tf" | sort) | sort | uniq -c | sort -nr | head -1 | awk '{print $2}')
            echo "main_tf_dir=$MAIN_TF_DIR" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up security scanning tools
        if: steps.find_tf.outputs.tf_found == 'true'
        run: |
          # Install TFSec
          wget -q -O tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/
          tfsec --version
          
          # Install Checkov
          pip install checkov
          checkov --version
          
          # Copy security scripts and make them executable
          mkdir -p scripts
          cp -r inframate/scripts/security/* scripts/
          chmod +x scripts/*.sh
          ls -la scripts/
      
      - name: Run TFSec Security Scan
        if: steps.find_tf.outputs.tf_found == 'true'
        id: tfsec
        run: |
          cd target_repo
          MAIN_TF_DIR=$(cat $GITHUB_OUTPUT | grep main_tf_dir | cut -d= -f2)
          
          echo "Scanning directory: $MAIN_TF_DIR"
          mkdir -p security_reports
          
          # Run TFSec
          if [ -d "$MAIN_TF_DIR" ]; then
            tfsec "$MAIN_TF_DIR" --format json > security_reports/tfsec_report.json || true
            tfsec "$MAIN_TF_DIR" --format markdown > security_reports/tfsec_report.md || true
          else
            tfsec . --format json > security_reports/tfsec_report.json || true
            tfsec . --format markdown > security_reports/tfsec_report.md || true
          fi
          
          # Create summary
          ISSUE_COUNT=$(cat security_reports/tfsec_report.json | grep -o '"results":\[[^]]*\]' | grep -o 'severity' | wc -l)
          echo "tfsec_issues=$ISSUE_COUNT" >> $GITHUB_OUTPUT
          
          # Generate HTML report
          python3 ../scripts/tfsec_parser.py --json security_reports/tfsec_report.json --html security_reports/tfsec_report.html
          
          echo "TFSec scan completed. Found $ISSUE_COUNT issues."
      
      - name: Run Checkov Security Scan
        if: steps.find_tf.outputs.tf_found == 'true'
        id: checkov
        run: |
          cd target_repo
          MAIN_TF_DIR=$(cat $GITHUB_OUTPUT | grep main_tf_dir | cut -d= -f2)
          
          echo "Scanning directory: $MAIN_TF_DIR"
          mkdir -p security_reports
          
          # Run Checkov
          if [ -d "$MAIN_TF_DIR" ]; then
            checkov -d "$MAIN_TF_DIR" -o json > security_reports/checkov_report.json || true
            checkov -d "$MAIN_TF_DIR" -o cli > security_reports/checkov_report.txt || true
          else
            checkov -d . -o json > security_reports/checkov_report.json || true
            checkov -d . -o cli > security_reports/checkov_report.txt || true
          fi
          
          # Create summary
          FAILED_CHECKS=$(cat security_reports/checkov_report.json | grep -o '"check_id"' | wc -l)
          echo "checkov_issues=$FAILED_CHECKS" >> $GITHUB_OUTPUT
          
          # Generate HTML report
          python3 ../scripts/checkov_parser.py --json security_reports/checkov_report.json --html security_reports/checkov_report.html
          
          echo "Checkov scan completed. Found $FAILED_CHECKS issues."

      - name: Create Security Report
        if: steps.find_tf.outputs.tf_found == 'true'
        run: |
          cd target_repo
          MAIN_TF_DIR=$(cat $GITHUB_OUTPUT | grep main_tf_dir | cut -d= -f2)
          TFSEC_ISSUES=$(cat $GITHUB_OUTPUT | grep tfsec_issues | cut -d= -f2 || echo "0")
          CHECKOV_ISSUES=$(cat $GITHUB_OUTPUT | grep checkov_issues | cut -d= -f2 || echo "0")
          
          cd security_reports
          
          # Generate report using external script
          chmod +x ../../scripts/create_summary.sh
          ../../scripts/create_summary.sh $TFSEC_ISSUES $CHECKOV_ISSUES SECURITY_REPORT.md
          
          cd ..
          
          # Copy report to the main directory if it's not the same as the current directory
          if [ "$MAIN_TF_DIR" != "." ] && [ -d "$MAIN_TF_DIR" ]; then
            mkdir -p "${MAIN_TF_DIR}/security"
            cp -r security_reports/* "${MAIN_TF_DIR}/security/"
          fi
          
          echo "Security report generated."
      
      - name: Generate AI Security Analysis
        if: steps.find_tf.outputs.tf_found == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Install required packages
          pip install google-generativeai python-dotenv
          
          cd target_repo
          
          # Check if reports exist
          if [ ! -f "security_reports/tfsec_report.md" ] || [ ! -f "security_reports/checkov_report.txt" ]; then
            echo "Warning: Security reports not found. Cannot generate AI analysis."
            touch security_reports/AI_SECURITY_ANALYSIS.md
            echo "# Security Analysis Unavailable" > security_reports/AI_SECURITY_ANALYSIS.md
            echo "" >> security_reports/AI_SECURITY_ANALYSIS.md
            echo "Unable to generate AI security analysis due to missing security reports." >> security_reports/AI_SECURITY_ANALYSIS.md
            exit 0
          fi
          
          # Create a simple text file with all findings for Gemini
          echo "# TFSec Findings" > security_reports/all_findings.txt
          cat security_reports/tfsec_report.md >> security_reports/all_findings.txt
          echo "\n\n# Checkov Findings" >> security_reports/all_findings.txt
          cat security_reports/checkov_report.txt >> security_reports/all_findings.txt
          
          # Run the AI analysis if API key is available
          if [ -n "$GEMINI_API_KEY" ] || [ -n "$GOOGLE_API_KEY" ]; then
            echo "Generating AI-powered security analysis..."
            
            # Use cat to debug file content
            echo "TFSec report content:"
            cat security_reports/tfsec_report.md | head -20
            echo "Checkov report content:"
            cat security_reports/checkov_report.txt | head -20
            
            # Run gemini_security_analyzer with proper paths
            python3 ../scripts/gemini_security_analyzer.py \
              --tfsec-report="security_reports/tfsec_report.md" \
              --checkov-report="security_reports/checkov_report.txt" \
              --tf-directory="." \
              --output="security_reports/AI_SECURITY_ANALYSIS.md"
            
            # Check if analysis was generated successfully
            if [ -f "security_reports/AI_SECURITY_ANALYSIS.md" ] && [ -s "security_reports/AI_SECURITY_ANALYSIS.md" ]; then
              echo "AI security analysis generated successfully"
              # Print first few lines of the analysis for verification
              echo "First few lines of AI analysis:"
              head -10 security_reports/AI_SECURITY_ANALYSIS.md
            else
              echo "Failed to generate AI security analysis or file is empty"
              # Create a fallback analysis file with basic recommendations
              cp ../../scripts/fallback_recommendations.md security_reports/AI_SECURITY_ANALYSIS.md
            fi
          else
            echo "Skipping AI analysis - No Gemini API key found"
            # Create a notice file
            cp ../../scripts/missing_api_key.md security_reports/AI_SECURITY_ANALYSIS.md
          fi

      - name: Create Pull Request
        if: steps.find_tf.outputs.tf_found == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.REPO_PAT }}
          path: target_repo
          commit-message: "Add Infrastructure Security Scan Report"
          title: "ðŸ”’ Security Scan: Infrastructure Security Report"
          body: |
            # ðŸ”’ Infrastructure Security Scan
            
            This PR adds a security scan report for your Terraform infrastructure.
            
            ## Summary
            - **TFSec Issues**: ${{ steps.tfsec.outputs.tfsec_issues || '0' }}
            - **Checkov Issues**: ${{ steps.checkov.outputs.checkov_issues || '0' }}
            
            ## What's included
            - Comprehensive security scan report
            - Issues identified with their severity levels
            - Recommendations for improving security
            - AI-powered security analysis with actionable advice
            
            Please review the `security_reports/SECURITY_REPORT.md` and `security_reports/AI_SECURITY_ANALYSIS.md` files for detailed information.
          branch: "inframate/security-scan"
          base: ${{ github.event.inputs.target_branch }}
      
      - name: Upload Security Reports
        if: steps.find_tf.outputs.tf_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: target_repo/security_reports/
          retention-days: 7 