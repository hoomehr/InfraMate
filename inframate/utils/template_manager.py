"""
Template manager for loading and modifying Terraform templates
"""
import os
from pathlib import Path
from typing import Dict, List, Optional

class TemplateManager:
    def __init__(self):
        self.template_dir = Path(__file__).parent.parent.parent / "templates" / "aws" / "terraform"
        self.templates = {}
        self._load_templates()

    def _load_templates(self):
        """Load all Terraform templates from the templates directory"""
        for template_file in self.template_dir.glob("*.tf"):
            with open(template_file, "r") as f:
                self.templates[template_file.stem] = f.read()

    def get_template(self, template_name: str) -> Optional[str]:
        """Get a specific template by name"""
        return self.templates.get(template_name)

    def combine_templates(self, template_names: List[str]) -> str:
        """Combine multiple templates into a single Terraform configuration"""
        combined = """# Terraform configuration generated by Inframate
provider "aws" {
  region = var.region
}

"""
        for name in template_names:
            template = self.get_template(name)
            if template:
                combined += f"\n# {name} configuration\n{template}\n"

        return combined

    def get_template_for_services(self, services: List[str]) -> str:
        """Get appropriate templates based on the list of services"""
        template_names = []
        
        # Map services to template names
        service_to_template = {
            # Compute Services
            "Lambda": "nodejs_lambda",
            "API Gateway": "nodejs_lambda",  # Included in nodejs_lambda template
            "EC2": "ec2",
            "ECS": "ecs",
            "EKS": "eks",
            "Elastic Beanstalk": "elastic_beanstalk",
            
            # Storage Services
            "S3": "webapp",
            "CloudFront": "webapp",  # Included in webapp template
            "EFS": "efs",
            
            # Database Services
            "RDS": "database",
            "DocumentDB": "database",
            "ElastiCache": "database",
            "DynamoDB": "dynamodb",
            
            # Networking Services
            "VPC": "vpc",
            "Route53": "route53",
            "CloudFront": "cloudfront",
            "API Gateway": "api_gateway",
            
            # Load Balancing
            "ALB": "alb",
            "NLB": "nlb",
            
            # Security Services
            "WAF": "waf",
            "Shield": "shield",
            "GuardDuty": "guardduty",
            
            # Monitoring Services
            "CloudWatch": "cloudwatch",
            "X-Ray": "xray",
            
            # CI/CD Services
            "CodeBuild": "codebuild",
            "CodePipeline": "codepipeline",
            "CodeDeploy": "codedeploy"
        }

        # Add templates based on services
        for service in services:
            template_name = service_to_template.get(service)
            if template_name and template_name not in template_names:
                template_names.append(template_name)

        # Always include these templates
        required_templates = ["variables", "vpc"]
        for template in required_templates:
            if template not in template_names:
                template_names.append(template)

        return self.combine_templates(template_names) 